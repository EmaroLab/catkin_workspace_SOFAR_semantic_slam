// Generated by gencpp from file miro_msgs/core_control.msg
// DO NOT EDIT!


#ifndef MIRO_MSGS_MESSAGE_CORE_CONTROL_H
#define MIRO_MSGS_MESSAGE_CORE_CONTROL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <miro_msgs/priority_peak.h>
#include <miro_msgs/affect.h>
#include <miro_msgs/affect.h>
#include <miro_msgs/sleep.h>
#include <miro_msgs/push.h>

namespace miro_msgs
{
template <class ContainerAllocator>
struct core_control_
{
  typedef core_control_<ContainerAllocator> Type;

  core_control_()
    : header()
    , msg_flags(0)
    , priming_multiplicative()
    , priming_additive()
    , priority_peak()
    , disinhibition()
    , priority_scale()
    , priority_offset()
    , mood_drive_target()
    , mood_drive_gamma(0.0)
    , emotion_drive_target()
    , emotion_drive_gamma(0.0)
    , sleep_drive_target()
    , sleep_drive_gamma(0.0)
    , drive_vocal(0.0)
    , body_push()  {
      priming_multiplicative.assign(0.0);

      priming_additive.assign(0.0);

      disinhibition.assign(0.0);

      priority_scale.assign(0.0);

      priority_offset.assign(0.0);
  }
  core_control_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , msg_flags(0)
    , priming_multiplicative()
    , priming_additive()
    , priority_peak(_alloc)
    , disinhibition()
    , priority_scale()
    , priority_offset()
    , mood_drive_target(_alloc)
    , mood_drive_gamma(0.0)
    , emotion_drive_target(_alloc)
    , emotion_drive_gamma(0.0)
    , sleep_drive_target(_alloc)
    , sleep_drive_gamma(0.0)
    , drive_vocal(0.0)
    , body_push(_alloc)  {
  (void)_alloc;
      priming_multiplicative.assign(0.0);

      priming_additive.assign(0.0);

      disinhibition.assign(0.0);

      priority_scale.assign(0.0);

      priority_offset.assign(0.0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint32_t _msg_flags_type;
  _msg_flags_type msg_flags;

   typedef boost::array<float, 8>  _priming_multiplicative_type;
  _priming_multiplicative_type priming_multiplicative;

   typedef boost::array<float, 8>  _priming_additive_type;
  _priming_additive_type priming_additive;

   typedef  ::miro_msgs::priority_peak_<ContainerAllocator>  _priority_peak_type;
  _priority_peak_type priority_peak;

   typedef boost::array<float, 8>  _disinhibition_type;
  _disinhibition_type disinhibition;

   typedef boost::array<float, 8>  _priority_scale_type;
  _priority_scale_type priority_scale;

   typedef boost::array<float, 8>  _priority_offset_type;
  _priority_offset_type priority_offset;

   typedef  ::miro_msgs::affect_<ContainerAllocator>  _mood_drive_target_type;
  _mood_drive_target_type mood_drive_target;

   typedef float _mood_drive_gamma_type;
  _mood_drive_gamma_type mood_drive_gamma;

   typedef  ::miro_msgs::affect_<ContainerAllocator>  _emotion_drive_target_type;
  _emotion_drive_target_type emotion_drive_target;

   typedef float _emotion_drive_gamma_type;
  _emotion_drive_gamma_type emotion_drive_gamma;

   typedef  ::miro_msgs::sleep_<ContainerAllocator>  _sleep_drive_target_type;
  _sleep_drive_target_type sleep_drive_target;

   typedef float _sleep_drive_gamma_type;
  _sleep_drive_gamma_type sleep_drive_gamma;

   typedef float _drive_vocal_type;
  _drive_vocal_type drive_vocal;

   typedef std::vector< ::miro_msgs::push_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::miro_msgs::push_<ContainerAllocator> >::other >  _body_push_type;
  _body_push_type body_push;


    enum { FLAG_SYNC_PLATFORM = 1u };
     enum { FLAG_SYNC_CORE = 2u };
 

  typedef boost::shared_ptr< ::miro_msgs::core_control_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::miro_msgs::core_control_<ContainerAllocator> const> ConstPtr;

}; // struct core_control_

typedef ::miro_msgs::core_control_<std::allocator<void> > core_control;

typedef boost::shared_ptr< ::miro_msgs::core_control > core_controlPtr;
typedef boost::shared_ptr< ::miro_msgs::core_control const> core_controlConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::miro_msgs::core_control_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::miro_msgs::core_control_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace miro_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/msg'], 'miro_msgs': ['/mnt/data/Dropbox/CqR/MIRO1/miro1/mdk/share/miro_msgs/msg'], 'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::miro_msgs::core_control_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::miro_msgs::core_control_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::miro_msgs::core_control_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::miro_msgs::core_control_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::miro_msgs::core_control_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::miro_msgs::core_control_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::miro_msgs::core_control_<ContainerAllocator> >
{
  static const char* value()
  {
    return "52582e6531275ac4d2c842929d7e98c1";
  }

  static const char* value(const ::miro_msgs::core_control_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x52582e6531275ac4ULL;
  static const uint64_t static_value2 = 0xd2c842929d7e98c1ULL;
};

template<class ContainerAllocator>
struct DataType< ::miro_msgs::core_control_<ContainerAllocator> >
{
  static const char* value()
  {
    return "miro_msgs/core_control";
  }

  static const char* value(const ::miro_msgs::core_control_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::miro_msgs::core_control_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n\
# direction: downstream\n\
# destination: biomimetic core\n\
# description: control signals\n\
\n\
\n\
\n\
#### HEADER\n\
\n\
# standard header\n\
std_msgs/Header header\n\
\n\
# message flags\n\
uint32 msg_flags\n\
\n\
# set as many of these as required to force synchronisation\n\
# between those streams (you must set identical flags on\n\
# each stream)\n\
uint32 FLAG_SYNC_PLATFORM=1\n\
uint32 FLAG_SYNC_CORE=2\n\
\n\
\n\
\n\
#### BRANCH\n\
\n\
float32[8] priming_multiplicative\n\
float32[8] priming_additive\n\
\n\
\n\
\n\
#### ACTION\n\
\n\
miro_msgs/priority_peak priority_peak\n\
float32[8] disinhibition\n\
float32[8] priority_scale\n\
float32[8] priority_offset\n\
\n\
\n\
\n\
#### AFFECT\n\
\n\
miro_msgs/affect mood_drive_target\n\
float32 mood_drive_gamma\n\
\n\
miro_msgs/affect emotion_drive_target\n\
float32 emotion_drive_gamma\n\
\n\
miro_msgs/sleep sleep_drive_target\n\
float32 sleep_drive_gamma\n\
\n\
\n\
\n\
#### EXPRESS\n\
\n\
float32 drive_vocal\n\
\n\
\n\
\n\
#### BODY\n\
\n\
# array of pushes; provide up to four pushes at once;\n\
# members with zero pushvec have no effect\n\
miro_msgs/push[] body_push\n\
\n\
\n\
\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: miro_msgs/priority_peak\n\
float32 azim\n\
float32 elev\n\
float32 height\n\
float32 size\n\
int32 t_complete\n\
\n\
\n\
================================================================================\n\
MSG: miro_msgs/affect\n\
float32 valence\n\
float32 arousal\n\
\n\
================================================================================\n\
MSG: miro_msgs/sleep\n\
float32 wakefulness\n\
float32 pressure\n\
\n\
================================================================================\n\
MSG: miro_msgs/push\n\
#	The identifier of the pushed link\n\
int32 link\n\
\n\
#	Flags (see miro_constants/miro.py)\n\
#\n\
#	MIRO_BODY_PUSH_IMPULSE\n\
#		Treat push as an impulse (in mm).\n\
#\n\
#	MIRO_BODY_PUSH_VELOCITY\n\
#		Treat push as a velocity (in mm/sec).\n\
#\n\
#	NB: If neither of the above flags is set, the push should\n\
#	not be actioned at all (this condition is used in server\n\
#	to indicate \"not pending\").\n\
#\n\
#	MIRO_BODY_PUSH_ZERO_POSE_DR\n\
#		Zero out any resultant change in pose.dr.\n\
uint32 flags\n\
\n\
#	The pushed point, in the reference frame of the pushed link\n\
geometry_msgs/Point pushpos\n\
\n\
#	The push vector, in the reference frame of the pushed link\n\
geometry_msgs/Vector3 pushvec\n\
\n\
\n\
\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::miro_msgs::core_control_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::miro_msgs::core_control_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.msg_flags);
      stream.next(m.priming_multiplicative);
      stream.next(m.priming_additive);
      stream.next(m.priority_peak);
      stream.next(m.disinhibition);
      stream.next(m.priority_scale);
      stream.next(m.priority_offset);
      stream.next(m.mood_drive_target);
      stream.next(m.mood_drive_gamma);
      stream.next(m.emotion_drive_target);
      stream.next(m.emotion_drive_gamma);
      stream.next(m.sleep_drive_target);
      stream.next(m.sleep_drive_gamma);
      stream.next(m.drive_vocal);
      stream.next(m.body_push);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct core_control_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::miro_msgs::core_control_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::miro_msgs::core_control_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "msg_flags: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.msg_flags);
    s << indent << "priming_multiplicative[]" << std::endl;
    for (size_t i = 0; i < v.priming_multiplicative.size(); ++i)
    {
      s << indent << "  priming_multiplicative[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.priming_multiplicative[i]);
    }
    s << indent << "priming_additive[]" << std::endl;
    for (size_t i = 0; i < v.priming_additive.size(); ++i)
    {
      s << indent << "  priming_additive[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.priming_additive[i]);
    }
    s << indent << "priority_peak: ";
    s << std::endl;
    Printer< ::miro_msgs::priority_peak_<ContainerAllocator> >::stream(s, indent + "  ", v.priority_peak);
    s << indent << "disinhibition[]" << std::endl;
    for (size_t i = 0; i < v.disinhibition.size(); ++i)
    {
      s << indent << "  disinhibition[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.disinhibition[i]);
    }
    s << indent << "priority_scale[]" << std::endl;
    for (size_t i = 0; i < v.priority_scale.size(); ++i)
    {
      s << indent << "  priority_scale[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.priority_scale[i]);
    }
    s << indent << "priority_offset[]" << std::endl;
    for (size_t i = 0; i < v.priority_offset.size(); ++i)
    {
      s << indent << "  priority_offset[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.priority_offset[i]);
    }
    s << indent << "mood_drive_target: ";
    s << std::endl;
    Printer< ::miro_msgs::affect_<ContainerAllocator> >::stream(s, indent + "  ", v.mood_drive_target);
    s << indent << "mood_drive_gamma: ";
    Printer<float>::stream(s, indent + "  ", v.mood_drive_gamma);
    s << indent << "emotion_drive_target: ";
    s << std::endl;
    Printer< ::miro_msgs::affect_<ContainerAllocator> >::stream(s, indent + "  ", v.emotion_drive_target);
    s << indent << "emotion_drive_gamma: ";
    Printer<float>::stream(s, indent + "  ", v.emotion_drive_gamma);
    s << indent << "sleep_drive_target: ";
    s << std::endl;
    Printer< ::miro_msgs::sleep_<ContainerAllocator> >::stream(s, indent + "  ", v.sleep_drive_target);
    s << indent << "sleep_drive_gamma: ";
    Printer<float>::stream(s, indent + "  ", v.sleep_drive_gamma);
    s << indent << "drive_vocal: ";
    Printer<float>::stream(s, indent + "  ", v.drive_vocal);
    s << indent << "body_push[]" << std::endl;
    for (size_t i = 0; i < v.body_push.size(); ++i)
    {
      s << indent << "  body_push[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::miro_msgs::push_<ContainerAllocator> >::stream(s, indent + "    ", v.body_push[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MIRO_MSGS_MESSAGE_CORE_CONTROL_H
