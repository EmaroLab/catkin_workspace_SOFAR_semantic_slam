// Generated by gencpp from file miro_msgs/platform_sensors.msg
// DO NOT EDIT!


#ifndef MIRO_MSGS_MESSAGE_PLATFORM_SENSORS_H
#define MIRO_MSGS_MESSAGE_PLATFORM_SENSORS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <sensor_msgs/Temperature.h>
#include <sensor_msgs/Imu.h>
#include <sensor_msgs/Imu.h>
#include <nav_msgs/Odometry.h>
#include <sensor_msgs/JointState.h>
#include <sensor_msgs/Range.h>

namespace miro_msgs
{
template <class ContainerAllocator>
struct platform_sensors_
{
  typedef platform_sensors_<ContainerAllocator> Type;

  platform_sensors_()
    : header()
    , msg_flags(0)
    , time_usec(0)
    , battery_voltage(0.0)
    , temperature()
    , accel_head()
    , accel_body()
    , odometry()
    , joint_state()
    , eyelid_closure(0.0)
    , dip_state_phys(0)
    , sonar_range()
    , light()
    , touch_head()
    , touch_body()
    , cliff()  {
      light.assign(0);

      touch_head.assign(0);

      touch_body.assign(0);

      cliff.assign(0);
  }
  platform_sensors_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , msg_flags(0)
    , time_usec(0)
    , battery_voltage(0.0)
    , temperature(_alloc)
    , accel_head(_alloc)
    , accel_body(_alloc)
    , odometry(_alloc)
    , joint_state(_alloc)
    , eyelid_closure(0.0)
    , dip_state_phys(0)
    , sonar_range(_alloc)
    , light()
    , touch_head()
    , touch_body()
    , cliff()  {
  (void)_alloc;
      light.assign(0);

      touch_head.assign(0);

      touch_body.assign(0);

      cliff.assign(0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint32_t _msg_flags_type;
  _msg_flags_type msg_flags;

   typedef int32_t _time_usec_type;
  _time_usec_type time_usec;

   typedef float _battery_voltage_type;
  _battery_voltage_type battery_voltage;

   typedef  ::sensor_msgs::Temperature_<ContainerAllocator>  _temperature_type;
  _temperature_type temperature;

   typedef  ::sensor_msgs::Imu_<ContainerAllocator>  _accel_head_type;
  _accel_head_type accel_head;

   typedef  ::sensor_msgs::Imu_<ContainerAllocator>  _accel_body_type;
  _accel_body_type accel_body;

   typedef  ::nav_msgs::Odometry_<ContainerAllocator>  _odometry_type;
  _odometry_type odometry;

   typedef  ::sensor_msgs::JointState_<ContainerAllocator>  _joint_state_type;
  _joint_state_type joint_state;

   typedef float _eyelid_closure_type;
  _eyelid_closure_type eyelid_closure;

   typedef uint8_t _dip_state_phys_type;
  _dip_state_phys_type dip_state_phys;

   typedef  ::sensor_msgs::Range_<ContainerAllocator>  _sonar_range_type;
  _sonar_range_type sonar_range;

   typedef boost::array<uint8_t, 4>  _light_type;
  _light_type light;

   typedef boost::array<uint8_t, 4>  _touch_head_type;
  _touch_head_type touch_head;

   typedef boost::array<uint8_t, 4>  _touch_body_type;
  _touch_body_type touch_body;

   typedef boost::array<uint8_t, 2>  _cliff_type;
  _cliff_type cliff;




  typedef boost::shared_ptr< ::miro_msgs::platform_sensors_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::miro_msgs::platform_sensors_<ContainerAllocator> const> ConstPtr;

}; // struct platform_sensors_

typedef ::miro_msgs::platform_sensors_<std::allocator<void> > platform_sensors;

typedef boost::shared_ptr< ::miro_msgs::platform_sensors > platform_sensorsPtr;
typedef boost::shared_ptr< ::miro_msgs::platform_sensors const> platform_sensorsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::miro_msgs::platform_sensors_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::miro_msgs::platform_sensors_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace miro_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/msg'], 'miro_msgs': ['/mnt/data/Dropbox/CqR/MIRO1/miro1/mdk/share/miro_msgs/msg'], 'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::miro_msgs::platform_sensors_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::miro_msgs::platform_sensors_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::miro_msgs::platform_sensors_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::miro_msgs::platform_sensors_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::miro_msgs::platform_sensors_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::miro_msgs::platform_sensors_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::miro_msgs::platform_sensors_<ContainerAllocator> >
{
  static const char* value()
  {
    return "547d0cf6cf799e035dff5847bb95c9dd";
  }

  static const char* value(const ::miro_msgs::platform_sensors_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x547d0cf6cf799e03ULL;
  static const uint64_t static_value2 = 0x5dff5847bb95c9ddULL;
};

template<class ContainerAllocator>
struct DataType< ::miro_msgs::platform_sensors_<ContainerAllocator> >
{
  static const char* value()
  {
    return "miro_msgs/platform_sensors";
  }

  static const char* value(const ::miro_msgs::platform_sensors_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::miro_msgs::platform_sensors_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n\
# direction: upstream\n\
# source: robot platform\n\
# description: latest hi-rate (50Hz) sensor readings\n\
\n\
\n\
\n\
#### HEADER\n\
\n\
# standard header\n\
std_msgs/Header header\n\
\n\
# message flags\n\
uint32 msg_flags\n\
\n\
# additional header\n\
int32 time_usec			# time in usec with rollover at 1<<29\n\
\n\
\n\
\n\
#### INTEROCEPTIVE\n\
\n\
# battery\n\
#sensor_msgs/BatteryState battery_state\n\
float32 battery_voltage\n\
\n\
# temperature\n\
sensor_msgs/Temperature temperature\n\
\n\
# accelerometers\n\
sensor_msgs/Imu accel_head\n\
sensor_msgs/Imu accel_body\n\
\n\
# odometry\n\
nav_msgs/Odometry odometry\n\
\n\
# joints\n\
sensor_msgs/JointState joint_state\n\
float32 eyelid_closure\n\
\n\
# switches\n\
uint8 dip_state_phys\n\
\n\
\n\
\n\
#### EXTEROCEPTIVE\n\
\n\
# sonar\n\
sensor_msgs/Range sonar_range\n\
\n\
# light\n\
#sensor_msgs/Illuminance[4] illum\n\
# we don't yet know the conversion to illuminance, so we\n\
# use a different form for the raw information from sensors\n\
# order is: front left, right, rear left, right\n\
uint8[4] light\n\
\n\
# touch\n\
uint8[4] touch_head\n\
uint8[4] touch_body\n\
\n\
# cliff\n\
uint8[2] cliff\n\
\n\
\n\
\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: sensor_msgs/Temperature\n\
 # Single temperature reading.\n\
\n\
 Header header           # timestamp is the time the temperature was measured\n\
                         # frame_id is the location of the temperature reading\n\
\n\
 float64 temperature     # Measurement of the Temperature in Degrees Celsius\n\
\n\
 float64 variance        # 0 is interpreted as variance unknown\n\
================================================================================\n\
MSG: sensor_msgs/Imu\n\
# This is a message to hold data from an IMU (Inertial Measurement Unit)\n\
#\n\
# Accelerations should be in m/s^2 (not in g's), and rotational velocity should be in rad/sec\n\
#\n\
# If the covariance of the measurement is known, it should be filled in (if all you know is the \n\
# variance of each measurement, e.g. from the datasheet, just put those along the diagonal)\n\
# A covariance matrix of all zeros will be interpreted as \"covariance unknown\", and to use the\n\
# data a covariance will have to be assumed or gotten from some other source\n\
#\n\
# If you have no estimate for one of the data elements (e.g. your IMU doesn't produce an orientation \n\
# estimate), please set element 0 of the associated covariance matrix to -1\n\
# If you are interpreting this message, please check for a value of -1 in the first element of each \n\
# covariance matrix, and disregard the associated estimate.\n\
\n\
Header header\n\
\n\
geometry_msgs/Quaternion orientation\n\
float64[9] orientation_covariance # Row major about x, y, z axes\n\
\n\
geometry_msgs/Vector3 angular_velocity\n\
float64[9] angular_velocity_covariance # Row major about x, y, z axes\n\
\n\
geometry_msgs/Vector3 linear_acceleration\n\
float64[9] linear_acceleration_covariance # Row major x, y z \n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
================================================================================\n\
MSG: nav_msgs/Odometry\n\
# This represents an estimate of a position and velocity in free space.  \n\
# The pose in this message should be specified in the coordinate frame given by header.frame_id.\n\
# The twist in this message should be specified in the coordinate frame given by the child_frame_id\n\
Header header\n\
string child_frame_id\n\
geometry_msgs/PoseWithCovariance pose\n\
geometry_msgs/TwistWithCovariance twist\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseWithCovariance\n\
# This represents a pose in free space with uncertainty.\n\
\n\
Pose pose\n\
\n\
# Row-major representation of the 6x6 covariance matrix\n\
# The orientation parameters use a fixed-axis representation.\n\
# In order, the parameters are:\n\
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n\
float64[36] covariance\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of position and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/TwistWithCovariance\n\
# This expresses velocity in free space with uncertainty.\n\
\n\
Twist twist\n\
\n\
# Row-major representation of the 6x6 covariance matrix\n\
# The orientation parameters use a fixed-axis representation.\n\
# In order, the parameters are:\n\
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n\
float64[36] covariance\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Twist\n\
# This expresses velocity in free space broken into its linear and angular parts.\n\
Vector3  linear\n\
Vector3  angular\n\
\n\
================================================================================\n\
MSG: sensor_msgs/JointState\n\
# This is a message that holds data to describe the state of a set of torque controlled joints. \n\
#\n\
# The state of each joint (revolute or prismatic) is defined by:\n\
#  * the position of the joint (rad or m),\n\
#  * the velocity of the joint (rad/s or m/s) and \n\
#  * the effort that is applied in the joint (Nm or N).\n\
#\n\
# Each joint is uniquely identified by its name\n\
# The header specifies the time at which the joint states were recorded. All the joint states\n\
# in one message have to be recorded at the same time.\n\
#\n\
# This message consists of a multiple arrays, one for each part of the joint state. \n\
# The goal is to make each of the fields optional. When e.g. your joints have no\n\
# effort associated with them, you can leave the effort array empty. \n\
#\n\
# All arrays in this message should have the same size, or be empty.\n\
# This is the only way to uniquely associate the joint name with the correct\n\
# states.\n\
\n\
\n\
Header header\n\
\n\
string[] name\n\
float64[] position\n\
float64[] velocity\n\
float64[] effort\n\
\n\
================================================================================\n\
MSG: sensor_msgs/Range\n\
# Single range reading from an active ranger that emits energy and reports\n\
# one range reading that is valid along an arc at the distance measured. \n\
# This message is  not appropriate for laser scanners. See the LaserScan\n\
# message if you are working with a laser scanner.\n\
\n\
# This message also can represent a fixed-distance (binary) ranger.  This\n\
# sensor will have min_range===max_range===distance of detection.\n\
# These sensors follow REP 117 and will output -Inf if the object is detected\n\
# and +Inf if the object is outside of the detection range.\n\
\n\
Header header           # timestamp in the header is the time the ranger\n\
                        # returned the distance reading\n\
\n\
# Radiation type enums\n\
# If you want a value added to this list, send an email to the ros-users list\n\
uint8 ULTRASOUND=0\n\
uint8 INFRARED=1\n\
\n\
uint8 radiation_type    # the type of radiation used by the sensor\n\
                        # (sound, IR, etc) [enum]\n\
\n\
float32 field_of_view   # the size of the arc that the distance reading is\n\
                        # valid for [rad]\n\
                        # the object causing the range reading may have\n\
                        # been anywhere within -field_of_view/2 and\n\
                        # field_of_view/2 at the measured range. \n\
                        # 0 angle corresponds to the x-axis of the sensor.\n\
\n\
float32 min_range       # minimum range value [m]\n\
float32 max_range       # maximum range value [m]\n\
                        # Fixed distance rangers require min_range==max_range\n\
\n\
float32 range           # range data [m]\n\
                        # (Note: values < range_min or > range_max\n\
                        # should be discarded)\n\
                        # Fixed distance rangers only output -Inf or +Inf.\n\
                        # -Inf represents a detection within fixed distance.\n\
                        # (Detection too close to the sensor to quantify)\n\
                        # +Inf represents no detection within the fixed distance.\n\
                        # (Object out of range)\n\
";
  }

  static const char* value(const ::miro_msgs::platform_sensors_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::miro_msgs::platform_sensors_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.msg_flags);
      stream.next(m.time_usec);
      stream.next(m.battery_voltage);
      stream.next(m.temperature);
      stream.next(m.accel_head);
      stream.next(m.accel_body);
      stream.next(m.odometry);
      stream.next(m.joint_state);
      stream.next(m.eyelid_closure);
      stream.next(m.dip_state_phys);
      stream.next(m.sonar_range);
      stream.next(m.light);
      stream.next(m.touch_head);
      stream.next(m.touch_body);
      stream.next(m.cliff);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct platform_sensors_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::miro_msgs::platform_sensors_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::miro_msgs::platform_sensors_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "msg_flags: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.msg_flags);
    s << indent << "time_usec: ";
    Printer<int32_t>::stream(s, indent + "  ", v.time_usec);
    s << indent << "battery_voltage: ";
    Printer<float>::stream(s, indent + "  ", v.battery_voltage);
    s << indent << "temperature: ";
    s << std::endl;
    Printer< ::sensor_msgs::Temperature_<ContainerAllocator> >::stream(s, indent + "  ", v.temperature);
    s << indent << "accel_head: ";
    s << std::endl;
    Printer< ::sensor_msgs::Imu_<ContainerAllocator> >::stream(s, indent + "  ", v.accel_head);
    s << indent << "accel_body: ";
    s << std::endl;
    Printer< ::sensor_msgs::Imu_<ContainerAllocator> >::stream(s, indent + "  ", v.accel_body);
    s << indent << "odometry: ";
    s << std::endl;
    Printer< ::nav_msgs::Odometry_<ContainerAllocator> >::stream(s, indent + "  ", v.odometry);
    s << indent << "joint_state: ";
    s << std::endl;
    Printer< ::sensor_msgs::JointState_<ContainerAllocator> >::stream(s, indent + "  ", v.joint_state);
    s << indent << "eyelid_closure: ";
    Printer<float>::stream(s, indent + "  ", v.eyelid_closure);
    s << indent << "dip_state_phys: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.dip_state_phys);
    s << indent << "sonar_range: ";
    s << std::endl;
    Printer< ::sensor_msgs::Range_<ContainerAllocator> >::stream(s, indent + "  ", v.sonar_range);
    s << indent << "light[]" << std::endl;
    for (size_t i = 0; i < v.light.size(); ++i)
    {
      s << indent << "  light[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.light[i]);
    }
    s << indent << "touch_head[]" << std::endl;
    for (size_t i = 0; i < v.touch_head.size(); ++i)
    {
      s << indent << "  touch_head[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.touch_head[i]);
    }
    s << indent << "touch_body[]" << std::endl;
    for (size_t i = 0; i < v.touch_body.size(); ++i)
    {
      s << indent << "  touch_body[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.touch_body[i]);
    }
    s << indent << "cliff[]" << std::endl;
    for (size_t i = 0; i < v.cliff.size(); ++i)
    {
      s << indent << "  cliff[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.cliff[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MIRO_MSGS_MESSAGE_PLATFORM_SENSORS_H
