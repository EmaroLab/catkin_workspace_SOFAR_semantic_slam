// Generated by gencpp from file miro_msgs/sleep.msg
// DO NOT EDIT!


#ifndef MIRO_MSGS_MESSAGE_SLEEP_H
#define MIRO_MSGS_MESSAGE_SLEEP_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace miro_msgs
{
template <class ContainerAllocator>
struct sleep_
{
  typedef sleep_<ContainerAllocator> Type;

  sleep_()
    : wakefulness(0.0)
    , pressure(0.0)  {
    }
  sleep_(const ContainerAllocator& _alloc)
    : wakefulness(0.0)
    , pressure(0.0)  {
  (void)_alloc;
    }



   typedef float _wakefulness_type;
  _wakefulness_type wakefulness;

   typedef float _pressure_type;
  _pressure_type pressure;




  typedef boost::shared_ptr< ::miro_msgs::sleep_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::miro_msgs::sleep_<ContainerAllocator> const> ConstPtr;

}; // struct sleep_

typedef ::miro_msgs::sleep_<std::allocator<void> > sleep;

typedef boost::shared_ptr< ::miro_msgs::sleep > sleepPtr;
typedef boost::shared_ptr< ::miro_msgs::sleep const> sleepConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::miro_msgs::sleep_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::miro_msgs::sleep_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace miro_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/msg'], 'miro_msgs': ['/mnt/data/Dropbox/CqR/MIRO1/miro1/mdk/share/miro_msgs/msg'], 'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::miro_msgs::sleep_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::miro_msgs::sleep_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::miro_msgs::sleep_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::miro_msgs::sleep_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::miro_msgs::sleep_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::miro_msgs::sleep_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::miro_msgs::sleep_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9ae301b8349f95e1749450e5431eef09";
  }

  static const char* value(const ::miro_msgs::sleep_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9ae301b8349f95e1ULL;
  static const uint64_t static_value2 = 0x749450e5431eef09ULL;
};

template<class ContainerAllocator>
struct DataType< ::miro_msgs::sleep_<ContainerAllocator> >
{
  static const char* value()
  {
    return "miro_msgs/sleep";
  }

  static const char* value(const ::miro_msgs::sleep_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::miro_msgs::sleep_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 wakefulness\n\
float32 pressure\n\
";
  }

  static const char* value(const ::miro_msgs::sleep_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::miro_msgs::sleep_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.wakefulness);
      stream.next(m.pressure);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct sleep_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::miro_msgs::sleep_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::miro_msgs::sleep_<ContainerAllocator>& v)
  {
    s << indent << "wakefulness: ";
    Printer<float>::stream(s, indent + "  ", v.wakefulness);
    s << indent << "pressure: ";
    Printer<float>::stream(s, indent + "  ", v.pressure);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MIRO_MSGS_MESSAGE_SLEEP_H
