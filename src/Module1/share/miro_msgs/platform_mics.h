// Generated by gencpp from file miro_msgs/platform_mics.msg
// DO NOT EDIT!


#ifndef MIRO_MSGS_MESSAGE_PLATFORM_MICS_H
#define MIRO_MSGS_MESSAGE_PLATFORM_MICS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace miro_msgs
{
template <class ContainerAllocator>
struct platform_mics_
{
  typedef platform_mics_<ContainerAllocator> Type;

  platform_mics_()
    : header()
    , msg_flags(0)
    , t_complete(0)
    , fS(0)
    , sample_number(0)
    , data()  {
      data.assign(0);
  }
  platform_mics_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , msg_flags(0)
    , t_complete(0)
    , fS(0)
    , sample_number(0)
    , data()  {
  (void)_alloc;
      data.assign(0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint32_t _msg_flags_type;
  _msg_flags_type msg_flags;

   typedef int32_t _t_complete_type;
  _t_complete_type t_complete;

   typedef uint32_t _fS_type;
  _fS_type fS;

   typedef uint32_t _sample_number_type;
  _sample_number_type sample_number;

   typedef boost::array<int16_t, 4000>  _data_type;
  _data_type data;




  typedef boost::shared_ptr< ::miro_msgs::platform_mics_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::miro_msgs::platform_mics_<ContainerAllocator> const> ConstPtr;

}; // struct platform_mics_

typedef ::miro_msgs::platform_mics_<std::allocator<void> > platform_mics;

typedef boost::shared_ptr< ::miro_msgs::platform_mics > platform_micsPtr;
typedef boost::shared_ptr< ::miro_msgs::platform_mics const> platform_micsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::miro_msgs::platform_mics_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::miro_msgs::platform_mics_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace miro_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/msg'], 'miro_msgs': ['/mnt/data/Dropbox/CqR/MIRO1/miro1/mdk/share/miro_msgs/msg'], 'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::miro_msgs::platform_mics_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::miro_msgs::platform_mics_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::miro_msgs::platform_mics_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::miro_msgs::platform_mics_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::miro_msgs::platform_mics_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::miro_msgs::platform_mics_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::miro_msgs::platform_mics_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e0d585bee98f8b40f3eb8fae2d114fdb";
  }

  static const char* value(const ::miro_msgs::platform_mics_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe0d585bee98f8b40ULL;
  static const uint64_t static_value2 = 0xf3eb8fae2d114fdbULL;
};

template<class ContainerAllocator>
struct DataType< ::miro_msgs::platform_mics_<ContainerAllocator> >
{
  static const char* value()
  {
    return "miro_msgs/platform_mics";
  }

  static const char* value(const ::miro_msgs::platform_mics_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::miro_msgs::platform_mics_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n\
# direction: upstream\n\
# source: robot platform\n\
# description: latest samples from the stereo microphones\n\
\n\
\n\
\n\
#### HEADER\n\
\n\
# standard header\n\
std_msgs/Header header\n\
\n\
# message flags\n\
uint32 msg_flags\n\
\n\
\n\
\n\
#### MICROPHONES\n\
\n\
# mics header\n\
int32 t_complete\n\
uint32 fS\n\
uint32 sample_number # of first sample in block\n\
\n\
# data (two channels interleaved)\n\
# data are int10 in an int16 container\n\
int16[4000] data\n\
\n\
\n\
\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::miro_msgs::platform_mics_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::miro_msgs::platform_mics_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.msg_flags);
      stream.next(m.t_complete);
      stream.next(m.fS);
      stream.next(m.sample_number);
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct platform_mics_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::miro_msgs::platform_mics_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::miro_msgs::platform_mics_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "msg_flags: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.msg_flags);
    s << indent << "t_complete: ";
    Printer<int32_t>::stream(s, indent + "  ", v.t_complete);
    s << indent << "fS: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.fS);
    s << indent << "sample_number: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.sample_number);
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.data[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MIRO_MSGS_MESSAGE_PLATFORM_MICS_H
