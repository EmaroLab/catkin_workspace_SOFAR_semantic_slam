# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from miro_msgs/platform_sensors.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import sensor_msgs.msg
import nav_msgs.msg
import std_msgs.msg

class platform_sensors(genpy.Message):
  _md5sum = "547d0cf6cf799e035dff5847bb95c9dd"
  _type = "miro_msgs/platform_sensors"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """
# direction: upstream
# source: robot platform
# description: latest hi-rate (50Hz) sensor readings



#### HEADER

# standard header
std_msgs/Header header

# message flags
uint32 msg_flags

# additional header
int32 time_usec			# time in usec with rollover at 1<<29



#### INTEROCEPTIVE

# battery
#sensor_msgs/BatteryState battery_state
float32 battery_voltage

# temperature
sensor_msgs/Temperature temperature

# accelerometers
sensor_msgs/Imu accel_head
sensor_msgs/Imu accel_body

# odometry
nav_msgs/Odometry odometry

# joints
sensor_msgs/JointState joint_state
float32 eyelid_closure

# switches
uint8 dip_state_phys



#### EXTEROCEPTIVE

# sonar
sensor_msgs/Range sonar_range

# light
#sensor_msgs/Illuminance[4] illum
# we don't yet know the conversion to illuminance, so we
# use a different form for the raw information from sensors
# order is: front left, right, rear left, right
uint8[4] light

# touch
uint8[4] touch_head
uint8[4] touch_body

# cliff
uint8[2] cliff





================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: sensor_msgs/Temperature
 # Single temperature reading.

 Header header           # timestamp is the time the temperature was measured
                         # frame_id is the location of the temperature reading

 float64 temperature     # Measurement of the Temperature in Degrees Celsius

 float64 variance        # 0 is interpreted as variance unknown
================================================================================
MSG: sensor_msgs/Imu
# This is a message to hold data from an IMU (Inertial Measurement Unit)
#
# Accelerations should be in m/s^2 (not in g's), and rotational velocity should be in rad/sec
#
# If the covariance of the measurement is known, it should be filled in (if all you know is the 
# variance of each measurement, e.g. from the datasheet, just put those along the diagonal)
# A covariance matrix of all zeros will be interpreted as "covariance unknown", and to use the
# data a covariance will have to be assumed or gotten from some other source
#
# If you have no estimate for one of the data elements (e.g. your IMU doesn't produce an orientation 
# estimate), please set element 0 of the associated covariance matrix to -1
# If you are interpreting this message, please check for a value of -1 in the first element of each 
# covariance matrix, and disregard the associated estimate.

Header header

geometry_msgs/Quaternion orientation
float64[9] orientation_covariance # Row major about x, y, z axes

geometry_msgs/Vector3 angular_velocity
float64[9] angular_velocity_covariance # Row major about x, y, z axes

geometry_msgs/Vector3 linear_acceleration
float64[9] linear_acceleration_covariance # Row major x, y z 

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: nav_msgs/Odometry
# This represents an estimate of a position and velocity in free space.  
# The pose in this message should be specified in the coordinate frame given by header.frame_id.
# The twist in this message should be specified in the coordinate frame given by the child_frame_id
Header header
string child_frame_id
geometry_msgs/PoseWithCovariance pose
geometry_msgs/TwistWithCovariance twist

================================================================================
MSG: geometry_msgs/PoseWithCovariance
# This represents a pose in free space with uncertainty.

Pose pose

# Row-major representation of the 6x6 covariance matrix
# The orientation parameters use a fixed-axis representation.
# In order, the parameters are:
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)
float64[36] covariance

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/TwistWithCovariance
# This expresses velocity in free space with uncertainty.

Twist twist

# Row-major representation of the 6x6 covariance matrix
# The orientation parameters use a fixed-axis representation.
# In order, the parameters are:
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)
float64[36] covariance

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: sensor_msgs/JointState
# This is a message that holds data to describe the state of a set of torque controlled joints. 
#
# The state of each joint (revolute or prismatic) is defined by:
#  * the position of the joint (rad or m),
#  * the velocity of the joint (rad/s or m/s) and 
#  * the effort that is applied in the joint (Nm or N).
#
# Each joint is uniquely identified by its name
# The header specifies the time at which the joint states were recorded. All the joint states
# in one message have to be recorded at the same time.
#
# This message consists of a multiple arrays, one for each part of the joint state. 
# The goal is to make each of the fields optional. When e.g. your joints have no
# effort associated with them, you can leave the effort array empty. 
#
# All arrays in this message should have the same size, or be empty.
# This is the only way to uniquely associate the joint name with the correct
# states.


Header header

string[] name
float64[] position
float64[] velocity
float64[] effort

================================================================================
MSG: sensor_msgs/Range
# Single range reading from an active ranger that emits energy and reports
# one range reading that is valid along an arc at the distance measured. 
# This message is  not appropriate for laser scanners. See the LaserScan
# message if you are working with a laser scanner.

# This message also can represent a fixed-distance (binary) ranger.  This
# sensor will have min_range===max_range===distance of detection.
# These sensors follow REP 117 and will output -Inf if the object is detected
# and +Inf if the object is outside of the detection range.

Header header           # timestamp in the header is the time the ranger
                        # returned the distance reading

# Radiation type enums
# If you want a value added to this list, send an email to the ros-users list
uint8 ULTRASOUND=0
uint8 INFRARED=1

uint8 radiation_type    # the type of radiation used by the sensor
                        # (sound, IR, etc) [enum]

float32 field_of_view   # the size of the arc that the distance reading is
                        # valid for [rad]
                        # the object causing the range reading may have
                        # been anywhere within -field_of_view/2 and
                        # field_of_view/2 at the measured range. 
                        # 0 angle corresponds to the x-axis of the sensor.

float32 min_range       # minimum range value [m]
float32 max_range       # maximum range value [m]
                        # Fixed distance rangers require min_range==max_range

float32 range           # range data [m]
                        # (Note: values < range_min or > range_max
                        # should be discarded)
                        # Fixed distance rangers only output -Inf or +Inf.
                        # -Inf represents a detection within fixed distance.
                        # (Detection too close to the sensor to quantify)
                        # +Inf represents no detection within the fixed distance.
                        # (Object out of range)"""
  __slots__ = ['header','msg_flags','time_usec','battery_voltage','temperature','accel_head','accel_body','odometry','joint_state','eyelid_closure','dip_state_phys','sonar_range','light','touch_head','touch_body','cliff']
  _slot_types = ['std_msgs/Header','uint32','int32','float32','sensor_msgs/Temperature','sensor_msgs/Imu','sensor_msgs/Imu','nav_msgs/Odometry','sensor_msgs/JointState','float32','uint8','sensor_msgs/Range','uint8[4]','uint8[4]','uint8[4]','uint8[2]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,msg_flags,time_usec,battery_voltage,temperature,accel_head,accel_body,odometry,joint_state,eyelid_closure,dip_state_phys,sonar_range,light,touch_head,touch_body,cliff

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(platform_sensors, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.msg_flags is None:
        self.msg_flags = 0
      if self.time_usec is None:
        self.time_usec = 0
      if self.battery_voltage is None:
        self.battery_voltage = 0.
      if self.temperature is None:
        self.temperature = sensor_msgs.msg.Temperature()
      if self.accel_head is None:
        self.accel_head = sensor_msgs.msg.Imu()
      if self.accel_body is None:
        self.accel_body = sensor_msgs.msg.Imu()
      if self.odometry is None:
        self.odometry = nav_msgs.msg.Odometry()
      if self.joint_state is None:
        self.joint_state = sensor_msgs.msg.JointState()
      if self.eyelid_closure is None:
        self.eyelid_closure = 0.
      if self.dip_state_phys is None:
        self.dip_state_phys = 0
      if self.sonar_range is None:
        self.sonar_range = sensor_msgs.msg.Range()
      if self.light is None:
        self.light = b'\0'*4
      if self.touch_head is None:
        self.touch_head = b'\0'*4
      if self.touch_body is None:
        self.touch_body = b'\0'*4
      if self.cliff is None:
        self.cliff = b'\0'*2
    else:
      self.header = std_msgs.msg.Header()
      self.msg_flags = 0
      self.time_usec = 0
      self.battery_voltage = 0.
      self.temperature = sensor_msgs.msg.Temperature()
      self.accel_head = sensor_msgs.msg.Imu()
      self.accel_body = sensor_msgs.msg.Imu()
      self.odometry = nav_msgs.msg.Odometry()
      self.joint_state = sensor_msgs.msg.JointState()
      self.eyelid_closure = 0.
      self.dip_state_phys = 0
      self.sonar_range = sensor_msgs.msg.Range()
      self.light = b'\0'*4
      self.touch_head = b'\0'*4
      self.touch_body = b'\0'*4
      self.cliff = b'\0'*2

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_Iif3I().pack(_x.msg_flags, _x.time_usec, _x.battery_voltage, _x.temperature.header.seq, _x.temperature.header.stamp.secs, _x.temperature.header.stamp.nsecs))
      _x = self.temperature.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2d3I().pack(_x.temperature.temperature, _x.temperature.variance, _x.accel_head.header.seq, _x.accel_head.header.stamp.secs, _x.accel_head.header.stamp.nsecs))
      _x = self.accel_head.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_4d().pack(_x.accel_head.orientation.x, _x.accel_head.orientation.y, _x.accel_head.orientation.z, _x.accel_head.orientation.w))
      buff.write(_get_struct_9d().pack(*self.accel_head.orientation_covariance))
      _x = self
      buff.write(_get_struct_3d().pack(_x.accel_head.angular_velocity.x, _x.accel_head.angular_velocity.y, _x.accel_head.angular_velocity.z))
      buff.write(_get_struct_9d().pack(*self.accel_head.angular_velocity_covariance))
      _x = self
      buff.write(_get_struct_3d().pack(_x.accel_head.linear_acceleration.x, _x.accel_head.linear_acceleration.y, _x.accel_head.linear_acceleration.z))
      buff.write(_get_struct_9d().pack(*self.accel_head.linear_acceleration_covariance))
      _x = self
      buff.write(_get_struct_3I().pack(_x.accel_body.header.seq, _x.accel_body.header.stamp.secs, _x.accel_body.header.stamp.nsecs))
      _x = self.accel_body.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_4d().pack(_x.accel_body.orientation.x, _x.accel_body.orientation.y, _x.accel_body.orientation.z, _x.accel_body.orientation.w))
      buff.write(_get_struct_9d().pack(*self.accel_body.orientation_covariance))
      _x = self
      buff.write(_get_struct_3d().pack(_x.accel_body.angular_velocity.x, _x.accel_body.angular_velocity.y, _x.accel_body.angular_velocity.z))
      buff.write(_get_struct_9d().pack(*self.accel_body.angular_velocity_covariance))
      _x = self
      buff.write(_get_struct_3d().pack(_x.accel_body.linear_acceleration.x, _x.accel_body.linear_acceleration.y, _x.accel_body.linear_acceleration.z))
      buff.write(_get_struct_9d().pack(*self.accel_body.linear_acceleration_covariance))
      _x = self
      buff.write(_get_struct_3I().pack(_x.odometry.header.seq, _x.odometry.header.stamp.secs, _x.odometry.header.stamp.nsecs))
      _x = self.odometry.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.odometry.child_frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_7d().pack(_x.odometry.pose.pose.position.x, _x.odometry.pose.pose.position.y, _x.odometry.pose.pose.position.z, _x.odometry.pose.pose.orientation.x, _x.odometry.pose.pose.orientation.y, _x.odometry.pose.pose.orientation.z, _x.odometry.pose.pose.orientation.w))
      buff.write(_get_struct_36d().pack(*self.odometry.pose.covariance))
      _x = self
      buff.write(_get_struct_6d().pack(_x.odometry.twist.twist.linear.x, _x.odometry.twist.twist.linear.y, _x.odometry.twist.twist.linear.z, _x.odometry.twist.twist.angular.x, _x.odometry.twist.twist.angular.y, _x.odometry.twist.twist.angular.z))
      buff.write(_get_struct_36d().pack(*self.odometry.twist.covariance))
      _x = self
      buff.write(_get_struct_3I().pack(_x.joint_state.header.seq, _x.joint_state.header.stamp.secs, _x.joint_state.header.stamp.nsecs))
      _x = self.joint_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.joint_state.name)
      buff.write(_struct_I.pack(length))
      for val1 in self.joint_state.name:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.joint_state.position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.joint_state.position))
      length = len(self.joint_state.velocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.joint_state.velocity))
      length = len(self.joint_state.effort)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.joint_state.effort))
      _x = self
      buff.write(_get_struct_fB3I().pack(_x.eyelid_closure, _x.dip_state_phys, _x.sonar_range.header.seq, _x.sonar_range.header.stamp.secs, _x.sonar_range.header.stamp.nsecs))
      _x = self.sonar_range.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_B4f().pack(_x.sonar_range.radiation_type, _x.sonar_range.field_of_view, _x.sonar_range.min_range, _x.sonar_range.max_range, _x.sonar_range.range))
      _x = self.light
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_4B().pack(*_x))
      else:
        buff.write(_get_struct_4s().pack(_x))
      _x = self.touch_head
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_4B().pack(*_x))
      else:
        buff.write(_get_struct_4s().pack(_x))
      _x = self.touch_body
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_4B().pack(*_x))
      else:
        buff.write(_get_struct_4s().pack(_x))
      _x = self.cliff
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_2B().pack(*_x))
      else:
        buff.write(_get_struct_2s().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.temperature is None:
        self.temperature = sensor_msgs.msg.Temperature()
      if self.accel_head is None:
        self.accel_head = sensor_msgs.msg.Imu()
      if self.accel_body is None:
        self.accel_body = sensor_msgs.msg.Imu()
      if self.odometry is None:
        self.odometry = nav_msgs.msg.Odometry()
      if self.joint_state is None:
        self.joint_state = sensor_msgs.msg.JointState()
      if self.sonar_range is None:
        self.sonar_range = sensor_msgs.msg.Range()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.msg_flags, _x.time_usec, _x.battery_voltage, _x.temperature.header.seq, _x.temperature.header.stamp.secs, _x.temperature.header.stamp.nsecs,) = _get_struct_Iif3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.temperature.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.temperature.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 28
      (_x.temperature.temperature, _x.temperature.variance, _x.accel_head.header.seq, _x.accel_head.header.stamp.secs, _x.accel_head.header.stamp.nsecs,) = _get_struct_2d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.accel_head.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.accel_head.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.accel_head.orientation.x, _x.accel_head.orientation.y, _x.accel_head.orientation.z, _x.accel_head.orientation.w,) = _get_struct_4d().unpack(str[start:end])
      start = end
      end += 72
      self.accel_head.orientation_covariance = _get_struct_9d().unpack(str[start:end])
      _x = self
      start = end
      end += 24
      (_x.accel_head.angular_velocity.x, _x.accel_head.angular_velocity.y, _x.accel_head.angular_velocity.z,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 72
      self.accel_head.angular_velocity_covariance = _get_struct_9d().unpack(str[start:end])
      _x = self
      start = end
      end += 24
      (_x.accel_head.linear_acceleration.x, _x.accel_head.linear_acceleration.y, _x.accel_head.linear_acceleration.z,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 72
      self.accel_head.linear_acceleration_covariance = _get_struct_9d().unpack(str[start:end])
      _x = self
      start = end
      end += 12
      (_x.accel_body.header.seq, _x.accel_body.header.stamp.secs, _x.accel_body.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.accel_body.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.accel_body.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.accel_body.orientation.x, _x.accel_body.orientation.y, _x.accel_body.orientation.z, _x.accel_body.orientation.w,) = _get_struct_4d().unpack(str[start:end])
      start = end
      end += 72
      self.accel_body.orientation_covariance = _get_struct_9d().unpack(str[start:end])
      _x = self
      start = end
      end += 24
      (_x.accel_body.angular_velocity.x, _x.accel_body.angular_velocity.y, _x.accel_body.angular_velocity.z,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 72
      self.accel_body.angular_velocity_covariance = _get_struct_9d().unpack(str[start:end])
      _x = self
      start = end
      end += 24
      (_x.accel_body.linear_acceleration.x, _x.accel_body.linear_acceleration.y, _x.accel_body.linear_acceleration.z,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 72
      self.accel_body.linear_acceleration_covariance = _get_struct_9d().unpack(str[start:end])
      _x = self
      start = end
      end += 12
      (_x.odometry.header.seq, _x.odometry.header.stamp.secs, _x.odometry.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.odometry.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.odometry.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.odometry.child_frame_id = str[start:end].decode('utf-8')
      else:
        self.odometry.child_frame_id = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.odometry.pose.pose.position.x, _x.odometry.pose.pose.position.y, _x.odometry.pose.pose.position.z, _x.odometry.pose.pose.orientation.x, _x.odometry.pose.pose.orientation.y, _x.odometry.pose.pose.orientation.z, _x.odometry.pose.pose.orientation.w,) = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 288
      self.odometry.pose.covariance = _get_struct_36d().unpack(str[start:end])
      _x = self
      start = end
      end += 48
      (_x.odometry.twist.twist.linear.x, _x.odometry.twist.twist.linear.y, _x.odometry.twist.twist.linear.z, _x.odometry.twist.twist.angular.x, _x.odometry.twist.twist.angular.y, _x.odometry.twist.twist.angular.z,) = _get_struct_6d().unpack(str[start:end])
      start = end
      end += 288
      self.odometry.twist.covariance = _get_struct_36d().unpack(str[start:end])
      _x = self
      start = end
      end += 12
      (_x.joint_state.header.seq, _x.joint_state.header.stamp.secs, _x.joint_state.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.joint_state.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.joint_state.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.joint_state.name = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.joint_state.name.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.joint_state.position = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.joint_state.velocity = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.joint_state.effort = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 17
      (_x.eyelid_closure, _x.dip_state_phys, _x.sonar_range.header.seq, _x.sonar_range.header.stamp.secs, _x.sonar_range.header.stamp.nsecs,) = _get_struct_fB3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.sonar_range.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.sonar_range.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 17
      (_x.sonar_range.radiation_type, _x.sonar_range.field_of_view, _x.sonar_range.min_range, _x.sonar_range.max_range, _x.sonar_range.range,) = _get_struct_B4f().unpack(str[start:end])
      start = end
      end += 4
      self.light = str[start:end]
      start = end
      end += 4
      self.touch_head = str[start:end]
      start = end
      end += 4
      self.touch_body = str[start:end]
      start = end
      end += 2
      self.cliff = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_Iif3I().pack(_x.msg_flags, _x.time_usec, _x.battery_voltage, _x.temperature.header.seq, _x.temperature.header.stamp.secs, _x.temperature.header.stamp.nsecs))
      _x = self.temperature.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2d3I().pack(_x.temperature.temperature, _x.temperature.variance, _x.accel_head.header.seq, _x.accel_head.header.stamp.secs, _x.accel_head.header.stamp.nsecs))
      _x = self.accel_head.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_4d().pack(_x.accel_head.orientation.x, _x.accel_head.orientation.y, _x.accel_head.orientation.z, _x.accel_head.orientation.w))
      buff.write(self.accel_head.orientation_covariance.tostring())
      _x = self
      buff.write(_get_struct_3d().pack(_x.accel_head.angular_velocity.x, _x.accel_head.angular_velocity.y, _x.accel_head.angular_velocity.z))
      buff.write(self.accel_head.angular_velocity_covariance.tostring())
      _x = self
      buff.write(_get_struct_3d().pack(_x.accel_head.linear_acceleration.x, _x.accel_head.linear_acceleration.y, _x.accel_head.linear_acceleration.z))
      buff.write(self.accel_head.linear_acceleration_covariance.tostring())
      _x = self
      buff.write(_get_struct_3I().pack(_x.accel_body.header.seq, _x.accel_body.header.stamp.secs, _x.accel_body.header.stamp.nsecs))
      _x = self.accel_body.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_4d().pack(_x.accel_body.orientation.x, _x.accel_body.orientation.y, _x.accel_body.orientation.z, _x.accel_body.orientation.w))
      buff.write(self.accel_body.orientation_covariance.tostring())
      _x = self
      buff.write(_get_struct_3d().pack(_x.accel_body.angular_velocity.x, _x.accel_body.angular_velocity.y, _x.accel_body.angular_velocity.z))
      buff.write(self.accel_body.angular_velocity_covariance.tostring())
      _x = self
      buff.write(_get_struct_3d().pack(_x.accel_body.linear_acceleration.x, _x.accel_body.linear_acceleration.y, _x.accel_body.linear_acceleration.z))
      buff.write(self.accel_body.linear_acceleration_covariance.tostring())
      _x = self
      buff.write(_get_struct_3I().pack(_x.odometry.header.seq, _x.odometry.header.stamp.secs, _x.odometry.header.stamp.nsecs))
      _x = self.odometry.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.odometry.child_frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_7d().pack(_x.odometry.pose.pose.position.x, _x.odometry.pose.pose.position.y, _x.odometry.pose.pose.position.z, _x.odometry.pose.pose.orientation.x, _x.odometry.pose.pose.orientation.y, _x.odometry.pose.pose.orientation.z, _x.odometry.pose.pose.orientation.w))
      buff.write(self.odometry.pose.covariance.tostring())
      _x = self
      buff.write(_get_struct_6d().pack(_x.odometry.twist.twist.linear.x, _x.odometry.twist.twist.linear.y, _x.odometry.twist.twist.linear.z, _x.odometry.twist.twist.angular.x, _x.odometry.twist.twist.angular.y, _x.odometry.twist.twist.angular.z))
      buff.write(self.odometry.twist.covariance.tostring())
      _x = self
      buff.write(_get_struct_3I().pack(_x.joint_state.header.seq, _x.joint_state.header.stamp.secs, _x.joint_state.header.stamp.nsecs))
      _x = self.joint_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.joint_state.name)
      buff.write(_struct_I.pack(length))
      for val1 in self.joint_state.name:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.joint_state.position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.joint_state.position.tostring())
      length = len(self.joint_state.velocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.joint_state.velocity.tostring())
      length = len(self.joint_state.effort)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.joint_state.effort.tostring())
      _x = self
      buff.write(_get_struct_fB3I().pack(_x.eyelid_closure, _x.dip_state_phys, _x.sonar_range.header.seq, _x.sonar_range.header.stamp.secs, _x.sonar_range.header.stamp.nsecs))
      _x = self.sonar_range.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_B4f().pack(_x.sonar_range.radiation_type, _x.sonar_range.field_of_view, _x.sonar_range.min_range, _x.sonar_range.max_range, _x.sonar_range.range))
      _x = self.light
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_4B().pack(*_x))
      else:
        buff.write(_get_struct_4s().pack(_x))
      _x = self.touch_head
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_4B().pack(*_x))
      else:
        buff.write(_get_struct_4s().pack(_x))
      _x = self.touch_body
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_4B().pack(*_x))
      else:
        buff.write(_get_struct_4s().pack(_x))
      _x = self.cliff
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_2B().pack(*_x))
      else:
        buff.write(_get_struct_2s().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.temperature is None:
        self.temperature = sensor_msgs.msg.Temperature()
      if self.accel_head is None:
        self.accel_head = sensor_msgs.msg.Imu()
      if self.accel_body is None:
        self.accel_body = sensor_msgs.msg.Imu()
      if self.odometry is None:
        self.odometry = nav_msgs.msg.Odometry()
      if self.joint_state is None:
        self.joint_state = sensor_msgs.msg.JointState()
      if self.sonar_range is None:
        self.sonar_range = sensor_msgs.msg.Range()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.msg_flags, _x.time_usec, _x.battery_voltage, _x.temperature.header.seq, _x.temperature.header.stamp.secs, _x.temperature.header.stamp.nsecs,) = _get_struct_Iif3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.temperature.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.temperature.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 28
      (_x.temperature.temperature, _x.temperature.variance, _x.accel_head.header.seq, _x.accel_head.header.stamp.secs, _x.accel_head.header.stamp.nsecs,) = _get_struct_2d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.accel_head.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.accel_head.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.accel_head.orientation.x, _x.accel_head.orientation.y, _x.accel_head.orientation.z, _x.accel_head.orientation.w,) = _get_struct_4d().unpack(str[start:end])
      start = end
      end += 72
      self.accel_head.orientation_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
      _x = self
      start = end
      end += 24
      (_x.accel_head.angular_velocity.x, _x.accel_head.angular_velocity.y, _x.accel_head.angular_velocity.z,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 72
      self.accel_head.angular_velocity_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
      _x = self
      start = end
      end += 24
      (_x.accel_head.linear_acceleration.x, _x.accel_head.linear_acceleration.y, _x.accel_head.linear_acceleration.z,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 72
      self.accel_head.linear_acceleration_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
      _x = self
      start = end
      end += 12
      (_x.accel_body.header.seq, _x.accel_body.header.stamp.secs, _x.accel_body.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.accel_body.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.accel_body.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.accel_body.orientation.x, _x.accel_body.orientation.y, _x.accel_body.orientation.z, _x.accel_body.orientation.w,) = _get_struct_4d().unpack(str[start:end])
      start = end
      end += 72
      self.accel_body.orientation_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
      _x = self
      start = end
      end += 24
      (_x.accel_body.angular_velocity.x, _x.accel_body.angular_velocity.y, _x.accel_body.angular_velocity.z,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 72
      self.accel_body.angular_velocity_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
      _x = self
      start = end
      end += 24
      (_x.accel_body.linear_acceleration.x, _x.accel_body.linear_acceleration.y, _x.accel_body.linear_acceleration.z,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 72
      self.accel_body.linear_acceleration_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
      _x = self
      start = end
      end += 12
      (_x.odometry.header.seq, _x.odometry.header.stamp.secs, _x.odometry.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.odometry.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.odometry.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.odometry.child_frame_id = str[start:end].decode('utf-8')
      else:
        self.odometry.child_frame_id = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.odometry.pose.pose.position.x, _x.odometry.pose.pose.position.y, _x.odometry.pose.pose.position.z, _x.odometry.pose.pose.orientation.x, _x.odometry.pose.pose.orientation.y, _x.odometry.pose.pose.orientation.z, _x.odometry.pose.pose.orientation.w,) = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 288
      self.odometry.pose.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
      _x = self
      start = end
      end += 48
      (_x.odometry.twist.twist.linear.x, _x.odometry.twist.twist.linear.y, _x.odometry.twist.twist.linear.z, _x.odometry.twist.twist.angular.x, _x.odometry.twist.twist.angular.y, _x.odometry.twist.twist.angular.z,) = _get_struct_6d().unpack(str[start:end])
      start = end
      end += 288
      self.odometry.twist.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
      _x = self
      start = end
      end += 12
      (_x.joint_state.header.seq, _x.joint_state.header.stamp.secs, _x.joint_state.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.joint_state.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.joint_state.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.joint_state.name = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.joint_state.name.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.joint_state.position = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.joint_state.velocity = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.joint_state.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 17
      (_x.eyelid_closure, _x.dip_state_phys, _x.sonar_range.header.seq, _x.sonar_range.header.stamp.secs, _x.sonar_range.header.stamp.nsecs,) = _get_struct_fB3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.sonar_range.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.sonar_range.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 17
      (_x.sonar_range.radiation_type, _x.sonar_range.field_of_view, _x.sonar_range.min_range, _x.sonar_range.max_range, _x.sonar_range.range,) = _get_struct_B4f().unpack(str[start:end])
      start = end
      end += 4
      self.light = str[start:end]
      start = end
      end += 4
      self.touch_head = str[start:end]
      start = end
      end += 4
      self.touch_body = str[start:end]
      start = end
      end += 2
      self.cliff = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2d3I = None
def _get_struct_2d3I():
    global _struct_2d3I
    if _struct_2d3I is None:
        _struct_2d3I = struct.Struct("<2d3I")
    return _struct_2d3I
_struct_7d = None
def _get_struct_7d():
    global _struct_7d
    if _struct_7d is None:
        _struct_7d = struct.Struct("<7d")
    return _struct_7d
_struct_6d = None
def _get_struct_6d():
    global _struct_6d
    if _struct_6d is None:
        _struct_6d = struct.Struct("<6d")
    return _struct_6d
_struct_Iif3I = None
def _get_struct_Iif3I():
    global _struct_Iif3I
    if _struct_Iif3I is None:
        _struct_Iif3I = struct.Struct("<Iif3I")
    return _struct_Iif3I
_struct_2s = None
def _get_struct_2s():
    global _struct_2s
    if _struct_2s is None:
        _struct_2s = struct.Struct("<2s")
    return _struct_2s
_struct_36d = None
def _get_struct_36d():
    global _struct_36d
    if _struct_36d is None:
        _struct_36d = struct.Struct("<36d")
    return _struct_36d
_struct_9d = None
def _get_struct_9d():
    global _struct_9d
    if _struct_9d is None:
        _struct_9d = struct.Struct("<9d")
    return _struct_9d
_struct_4s = None
def _get_struct_4s():
    global _struct_4s
    if _struct_4s is None:
        _struct_4s = struct.Struct("<4s")
    return _struct_4s
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_B4f = None
def _get_struct_B4f():
    global _struct_B4f
    if _struct_B4f is None:
        _struct_B4f = struct.Struct("<B4f")
    return _struct_B4f
_struct_2B = None
def _get_struct_2B():
    global _struct_2B
    if _struct_2B is None:
        _struct_2B = struct.Struct("<2B")
    return _struct_2B
_struct_fB3I = None
def _get_struct_fB3I():
    global _struct_fB3I
    if _struct_fB3I is None:
        _struct_fB3I = struct.Struct("<fB3I")
    return _struct_fB3I
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_4B = None
def _get_struct_4B():
    global _struct_4B
    if _struct_4B is None:
        _struct_4B = struct.Struct("<4B")
    return _struct_4B
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
