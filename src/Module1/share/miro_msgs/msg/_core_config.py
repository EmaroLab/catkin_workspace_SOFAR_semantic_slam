# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from miro_msgs/core_config.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class core_config(genpy.Message):
  _md5sum = "5266ec95e82c31fd16cf7510eab84b6e"
  _type = "miro_msgs/core_config"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """
# direction: downstream
# destination: biomimetic core
# description: configuration data



#### HEADER

# standard header
std_msgs/Header header

# message flags
uint32 msg_flags

# set this flag to update signals; if this message is received
# without this flag set, the section "SIGNALS" is ignored.
uint32 FLAG_UPDATE_SIGNALS=1



#### SIGNALS

# P1_W
uint32 P1_W_signals

# P2B_W
uint32 P2B_W_signals

# P2U_W.affect
uint32 P2U_W_affect_signals

# P2U_W.express
uint32 P2U_W_express_signals

# P2U_W.action
uint32 P2U_W_action_signals

# P2U_W.body
uint32 P2U_W_body_signals

# P2L_W
uint32 P2L_W_signals

# P2S_W
uint32 P2S_W_signals



#### MODEL_PARS

# model_pars
#
# if this array is of non-zero size, it must be of size
# MIRO_P2_MODEL_PARS_SIZE bytes, and is used to update the
# model_pars in P2, via the bridge.
std_msgs/ByteMultiArray model_pars





================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: std_msgs/ByteMultiArray
# Please look at the MultiArrayLayout message definition for
# documentation on all multiarrays.

MultiArrayLayout  layout        # specification of data layout
byte[]            data          # array of data


================================================================================
MSG: std_msgs/MultiArrayLayout
# The multiarray declares a generic multi-dimensional array of a
# particular data type.  Dimensions are ordered from outer most
# to inner most.

MultiArrayDimension[] dim # Array of dimension properties
uint32 data_offset        # padding elements at front of data

# Accessors should ALWAYS be written in terms of dimension stride
# and specified outer-most dimension first.
# 
# multiarray(i,j,k) = data[data_offset + dim_stride[1]*i + dim_stride[2]*j + k]
#
# A standard, 3-channel 640x480 image with interleaved color channels
# would be specified as:
#
# dim[0].label  = "height"
# dim[0].size   = 480
# dim[0].stride = 3*640*480 = 921600  (note dim[0] stride is just size of image)
# dim[1].label  = "width"
# dim[1].size   = 640
# dim[1].stride = 3*640 = 1920
# dim[2].label  = "channel"
# dim[2].size   = 3
# dim[2].stride = 3
#
# multiarray(i,j,k) refers to the ith row, jth column, and kth channel.

================================================================================
MSG: std_msgs/MultiArrayDimension
string label   # label of given dimension
uint32 size    # size of given dimension (in type units)
uint32 stride  # stride of given dimension"""
  # Pseudo-constants
  FLAG_UPDATE_SIGNALS = 1

  __slots__ = ['header','msg_flags','P1_W_signals','P2B_W_signals','P2U_W_affect_signals','P2U_W_express_signals','P2U_W_action_signals','P2U_W_body_signals','P2L_W_signals','P2S_W_signals','model_pars']
  _slot_types = ['std_msgs/Header','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','std_msgs/ByteMultiArray']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,msg_flags,P1_W_signals,P2B_W_signals,P2U_W_affect_signals,P2U_W_express_signals,P2U_W_action_signals,P2U_W_body_signals,P2L_W_signals,P2S_W_signals,model_pars

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(core_config, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.msg_flags is None:
        self.msg_flags = 0
      if self.P1_W_signals is None:
        self.P1_W_signals = 0
      if self.P2B_W_signals is None:
        self.P2B_W_signals = 0
      if self.P2U_W_affect_signals is None:
        self.P2U_W_affect_signals = 0
      if self.P2U_W_express_signals is None:
        self.P2U_W_express_signals = 0
      if self.P2U_W_action_signals is None:
        self.P2U_W_action_signals = 0
      if self.P2U_W_body_signals is None:
        self.P2U_W_body_signals = 0
      if self.P2L_W_signals is None:
        self.P2L_W_signals = 0
      if self.P2S_W_signals is None:
        self.P2S_W_signals = 0
      if self.model_pars is None:
        self.model_pars = std_msgs.msg.ByteMultiArray()
    else:
      self.header = std_msgs.msg.Header()
      self.msg_flags = 0
      self.P1_W_signals = 0
      self.P2B_W_signals = 0
      self.P2U_W_affect_signals = 0
      self.P2U_W_express_signals = 0
      self.P2U_W_action_signals = 0
      self.P2U_W_body_signals = 0
      self.P2L_W_signals = 0
      self.P2S_W_signals = 0
      self.model_pars = std_msgs.msg.ByteMultiArray()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_9I().pack(_x.msg_flags, _x.P1_W_signals, _x.P2B_W_signals, _x.P2U_W_affect_signals, _x.P2U_W_express_signals, _x.P2U_W_action_signals, _x.P2U_W_body_signals, _x.P2L_W_signals, _x.P2S_W_signals))
      length = len(self.model_pars.layout.dim)
      buff.write(_struct_I.pack(length))
      for val1 in self.model_pars.layout.dim:
        _x = val1.label
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_get_struct_2I().pack(_x.size, _x.stride))
      buff.write(_get_struct_I().pack(self.model_pars.layout.data_offset))
      length = len(self.model_pars.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(struct.pack(pattern, *self.model_pars.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.model_pars is None:
        self.model_pars = std_msgs.msg.ByteMultiArray()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 36
      (_x.msg_flags, _x.P1_W_signals, _x.P2B_W_signals, _x.P2U_W_affect_signals, _x.P2U_W_express_signals, _x.P2U_W_action_signals, _x.P2U_W_body_signals, _x.P2L_W_signals, _x.P2S_W_signals,) = _get_struct_9I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.model_pars.layout.dim = []
      for i in range(0, length):
        val1 = std_msgs.msg.MultiArrayDimension()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.label = str[start:end].decode('utf-8')
        else:
          val1.label = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.size, _x.stride,) = _get_struct_2I().unpack(str[start:end])
        self.model_pars.layout.dim.append(val1)
      start = end
      end += 4
      (self.model_pars.layout.data_offset,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      end += struct.calcsize(pattern)
      self.model_pars.data = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_9I().pack(_x.msg_flags, _x.P1_W_signals, _x.P2B_W_signals, _x.P2U_W_affect_signals, _x.P2U_W_express_signals, _x.P2U_W_action_signals, _x.P2U_W_body_signals, _x.P2L_W_signals, _x.P2S_W_signals))
      length = len(self.model_pars.layout.dim)
      buff.write(_struct_I.pack(length))
      for val1 in self.model_pars.layout.dim:
        _x = val1.label
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_get_struct_2I().pack(_x.size, _x.stride))
      buff.write(_get_struct_I().pack(self.model_pars.layout.data_offset))
      length = len(self.model_pars.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(self.model_pars.data.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.model_pars is None:
        self.model_pars = std_msgs.msg.ByteMultiArray()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 36
      (_x.msg_flags, _x.P1_W_signals, _x.P2B_W_signals, _x.P2U_W_affect_signals, _x.P2U_W_express_signals, _x.P2U_W_action_signals, _x.P2U_W_body_signals, _x.P2L_W_signals, _x.P2S_W_signals,) = _get_struct_9I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.model_pars.layout.dim = []
      for i in range(0, length):
        val1 = std_msgs.msg.MultiArrayDimension()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.label = str[start:end].decode('utf-8')
        else:
          val1.label = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.size, _x.stride,) = _get_struct_2I().unpack(str[start:end])
        self.model_pars.layout.dim.append(val1)
      start = end
      end += 4
      (self.model_pars.layout.data_offset,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      end += struct.calcsize(pattern)
      self.model_pars.data = numpy.frombuffer(str[start:end], dtype=numpy.int8, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_9I = None
def _get_struct_9I():
    global _struct_9I
    if _struct_9I is None:
        _struct_9I = struct.Struct("<9I")
    return _struct_9I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
