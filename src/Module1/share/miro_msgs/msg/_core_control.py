# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from miro_msgs/core_control.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import miro_msgs.msg
import std_msgs.msg

class core_control(genpy.Message):
  _md5sum = "52582e6531275ac4d2c842929d7e98c1"
  _type = "miro_msgs/core_control"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """
# direction: downstream
# destination: biomimetic core
# description: control signals



#### HEADER

# standard header
std_msgs/Header header

# message flags
uint32 msg_flags

# set as many of these as required to force synchronisation
# between those streams (you must set identical flags on
# each stream)
uint32 FLAG_SYNC_PLATFORM=1
uint32 FLAG_SYNC_CORE=2



#### BRANCH

float32[8] priming_multiplicative
float32[8] priming_additive



#### ACTION

miro_msgs/priority_peak priority_peak
float32[8] disinhibition
float32[8] priority_scale
float32[8] priority_offset



#### AFFECT

miro_msgs/affect mood_drive_target
float32 mood_drive_gamma

miro_msgs/affect emotion_drive_target
float32 emotion_drive_gamma

miro_msgs/sleep sleep_drive_target
float32 sleep_drive_gamma



#### EXPRESS

float32 drive_vocal



#### BODY

# array of pushes; provide up to four pushes at once;
# members with zero pushvec have no effect
miro_msgs/push[] body_push





================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: miro_msgs/priority_peak
float32 azim
float32 elev
float32 height
float32 size
int32 t_complete


================================================================================
MSG: miro_msgs/affect
float32 valence
float32 arousal

================================================================================
MSG: miro_msgs/sleep
float32 wakefulness
float32 pressure

================================================================================
MSG: miro_msgs/push
#	The identifier of the pushed link
int32 link

#	Flags (see miro_constants/miro.py)
#
#	MIRO_BODY_PUSH_IMPULSE
#		Treat push as an impulse (in mm).
#
#	MIRO_BODY_PUSH_VELOCITY
#		Treat push as a velocity (in mm/sec).
#
#	NB: If neither of the above flags is set, the push should
#	not be actioned at all (this condition is used in server
#	to indicate "not pending").
#
#	MIRO_BODY_PUSH_ZERO_POSE_DR
#		Zero out any resultant change in pose.dr.
uint32 flags

#	The pushed point, in the reference frame of the pushed link
geometry_msgs/Point pushpos

#	The push vector, in the reference frame of the pushed link
geometry_msgs/Vector3 pushvec





================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  # Pseudo-constants
  FLAG_SYNC_PLATFORM = 1
  FLAG_SYNC_CORE = 2

  __slots__ = ['header','msg_flags','priming_multiplicative','priming_additive','priority_peak','disinhibition','priority_scale','priority_offset','mood_drive_target','mood_drive_gamma','emotion_drive_target','emotion_drive_gamma','sleep_drive_target','sleep_drive_gamma','drive_vocal','body_push']
  _slot_types = ['std_msgs/Header','uint32','float32[8]','float32[8]','miro_msgs/priority_peak','float32[8]','float32[8]','float32[8]','miro_msgs/affect','float32','miro_msgs/affect','float32','miro_msgs/sleep','float32','float32','miro_msgs/push[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,msg_flags,priming_multiplicative,priming_additive,priority_peak,disinhibition,priority_scale,priority_offset,mood_drive_target,mood_drive_gamma,emotion_drive_target,emotion_drive_gamma,sleep_drive_target,sleep_drive_gamma,drive_vocal,body_push

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(core_control, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.msg_flags is None:
        self.msg_flags = 0
      if self.priming_multiplicative is None:
        self.priming_multiplicative = [0.] * 8
      if self.priming_additive is None:
        self.priming_additive = [0.] * 8
      if self.priority_peak is None:
        self.priority_peak = miro_msgs.msg.priority_peak()
      if self.disinhibition is None:
        self.disinhibition = [0.] * 8
      if self.priority_scale is None:
        self.priority_scale = [0.] * 8
      if self.priority_offset is None:
        self.priority_offset = [0.] * 8
      if self.mood_drive_target is None:
        self.mood_drive_target = miro_msgs.msg.affect()
      if self.mood_drive_gamma is None:
        self.mood_drive_gamma = 0.
      if self.emotion_drive_target is None:
        self.emotion_drive_target = miro_msgs.msg.affect()
      if self.emotion_drive_gamma is None:
        self.emotion_drive_gamma = 0.
      if self.sleep_drive_target is None:
        self.sleep_drive_target = miro_msgs.msg.sleep()
      if self.sleep_drive_gamma is None:
        self.sleep_drive_gamma = 0.
      if self.drive_vocal is None:
        self.drive_vocal = 0.
      if self.body_push is None:
        self.body_push = []
    else:
      self.header = std_msgs.msg.Header()
      self.msg_flags = 0
      self.priming_multiplicative = [0.] * 8
      self.priming_additive = [0.] * 8
      self.priority_peak = miro_msgs.msg.priority_peak()
      self.disinhibition = [0.] * 8
      self.priority_scale = [0.] * 8
      self.priority_offset = [0.] * 8
      self.mood_drive_target = miro_msgs.msg.affect()
      self.mood_drive_gamma = 0.
      self.emotion_drive_target = miro_msgs.msg.affect()
      self.emotion_drive_gamma = 0.
      self.sleep_drive_target = miro_msgs.msg.sleep()
      self.sleep_drive_gamma = 0.
      self.drive_vocal = 0.
      self.body_push = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_I().pack(self.msg_flags))
      buff.write(_get_struct_8f().pack(*self.priming_multiplicative))
      buff.write(_get_struct_8f().pack(*self.priming_additive))
      _x = self
      buff.write(_get_struct_4fi().pack(_x.priority_peak.azim, _x.priority_peak.elev, _x.priority_peak.height, _x.priority_peak.size, _x.priority_peak.t_complete))
      buff.write(_get_struct_8f().pack(*self.disinhibition))
      buff.write(_get_struct_8f().pack(*self.priority_scale))
      buff.write(_get_struct_8f().pack(*self.priority_offset))
      _x = self
      buff.write(_get_struct_10f().pack(_x.mood_drive_target.valence, _x.mood_drive_target.arousal, _x.mood_drive_gamma, _x.emotion_drive_target.valence, _x.emotion_drive_target.arousal, _x.emotion_drive_gamma, _x.sleep_drive_target.wakefulness, _x.sleep_drive_target.pressure, _x.sleep_drive_gamma, _x.drive_vocal))
      length = len(self.body_push)
      buff.write(_struct_I.pack(length))
      for val1 in self.body_push:
        _x = val1
        buff.write(_get_struct_iI().pack(_x.link, _x.flags))
        _v1 = val1.pushpos
        _x = _v1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v2 = val1.pushvec
        _x = _v2
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.priority_peak is None:
        self.priority_peak = miro_msgs.msg.priority_peak()
      if self.mood_drive_target is None:
        self.mood_drive_target = miro_msgs.msg.affect()
      if self.emotion_drive_target is None:
        self.emotion_drive_target = miro_msgs.msg.affect()
      if self.sleep_drive_target is None:
        self.sleep_drive_target = miro_msgs.msg.sleep()
      if self.body_push is None:
        self.body_push = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (self.msg_flags,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 32
      self.priming_multiplicative = _get_struct_8f().unpack(str[start:end])
      start = end
      end += 32
      self.priming_additive = _get_struct_8f().unpack(str[start:end])
      _x = self
      start = end
      end += 20
      (_x.priority_peak.azim, _x.priority_peak.elev, _x.priority_peak.height, _x.priority_peak.size, _x.priority_peak.t_complete,) = _get_struct_4fi().unpack(str[start:end])
      start = end
      end += 32
      self.disinhibition = _get_struct_8f().unpack(str[start:end])
      start = end
      end += 32
      self.priority_scale = _get_struct_8f().unpack(str[start:end])
      start = end
      end += 32
      self.priority_offset = _get_struct_8f().unpack(str[start:end])
      _x = self
      start = end
      end += 40
      (_x.mood_drive_target.valence, _x.mood_drive_target.arousal, _x.mood_drive_gamma, _x.emotion_drive_target.valence, _x.emotion_drive_target.arousal, _x.emotion_drive_gamma, _x.sleep_drive_target.wakefulness, _x.sleep_drive_target.pressure, _x.sleep_drive_gamma, _x.drive_vocal,) = _get_struct_10f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.body_push = []
      for i in range(0, length):
        val1 = miro_msgs.msg.push()
        _x = val1
        start = end
        end += 8
        (_x.link, _x.flags,) = _get_struct_iI().unpack(str[start:end])
        _v3 = val1.pushpos
        _x = _v3
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v4 = val1.pushvec
        _x = _v4
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.body_push.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_I().pack(self.msg_flags))
      buff.write(self.priming_multiplicative.tostring())
      buff.write(self.priming_additive.tostring())
      _x = self
      buff.write(_get_struct_4fi().pack(_x.priority_peak.azim, _x.priority_peak.elev, _x.priority_peak.height, _x.priority_peak.size, _x.priority_peak.t_complete))
      buff.write(self.disinhibition.tostring())
      buff.write(self.priority_scale.tostring())
      buff.write(self.priority_offset.tostring())
      _x = self
      buff.write(_get_struct_10f().pack(_x.mood_drive_target.valence, _x.mood_drive_target.arousal, _x.mood_drive_gamma, _x.emotion_drive_target.valence, _x.emotion_drive_target.arousal, _x.emotion_drive_gamma, _x.sleep_drive_target.wakefulness, _x.sleep_drive_target.pressure, _x.sleep_drive_gamma, _x.drive_vocal))
      length = len(self.body_push)
      buff.write(_struct_I.pack(length))
      for val1 in self.body_push:
        _x = val1
        buff.write(_get_struct_iI().pack(_x.link, _x.flags))
        _v5 = val1.pushpos
        _x = _v5
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v6 = val1.pushvec
        _x = _v6
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.priority_peak is None:
        self.priority_peak = miro_msgs.msg.priority_peak()
      if self.mood_drive_target is None:
        self.mood_drive_target = miro_msgs.msg.affect()
      if self.emotion_drive_target is None:
        self.emotion_drive_target = miro_msgs.msg.affect()
      if self.sleep_drive_target is None:
        self.sleep_drive_target = miro_msgs.msg.sleep()
      if self.body_push is None:
        self.body_push = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (self.msg_flags,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 32
      self.priming_multiplicative = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=8)
      start = end
      end += 32
      self.priming_additive = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=8)
      _x = self
      start = end
      end += 20
      (_x.priority_peak.azim, _x.priority_peak.elev, _x.priority_peak.height, _x.priority_peak.size, _x.priority_peak.t_complete,) = _get_struct_4fi().unpack(str[start:end])
      start = end
      end += 32
      self.disinhibition = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=8)
      start = end
      end += 32
      self.priority_scale = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=8)
      start = end
      end += 32
      self.priority_offset = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=8)
      _x = self
      start = end
      end += 40
      (_x.mood_drive_target.valence, _x.mood_drive_target.arousal, _x.mood_drive_gamma, _x.emotion_drive_target.valence, _x.emotion_drive_target.arousal, _x.emotion_drive_gamma, _x.sleep_drive_target.wakefulness, _x.sleep_drive_target.pressure, _x.sleep_drive_gamma, _x.drive_vocal,) = _get_struct_10f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.body_push = []
      for i in range(0, length):
        val1 = miro_msgs.msg.push()
        _x = val1
        start = end
        end += 8
        (_x.link, _x.flags,) = _get_struct_iI().unpack(str[start:end])
        _v7 = val1.pushpos
        _x = _v7
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v8 = val1.pushvec
        _x = _v8
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.body_push.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4fi = None
def _get_struct_4fi():
    global _struct_4fi
    if _struct_4fi is None:
        _struct_4fi = struct.Struct("<4fi")
    return _struct_4fi
_struct_8f = None
def _get_struct_8f():
    global _struct_8f
    if _struct_8f is None:
        _struct_8f = struct.Struct("<8f")
    return _struct_8f
_struct_10f = None
def _get_struct_10f():
    global _struct_10f
    if _struct_10f is None:
        _struct_10f = struct.Struct("<10f")
    return _struct_10f
_struct_iI = None
def _get_struct_iI():
    global _struct_iI
    if _struct_iI is None:
        _struct_iI = struct.Struct("<iI")
    return _struct_iI
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
