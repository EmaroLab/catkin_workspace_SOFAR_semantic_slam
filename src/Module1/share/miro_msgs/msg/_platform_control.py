# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from miro_msgs/platform_control.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class platform_control(genpy.Message):
  _md5sum = "772dcaa16082fd0df16a4baa9867cf17"
  _type = "miro_msgs/platform_control"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """
# direction: downstream
# destination: robot platform
# description: control signals



# the robot can be driven in different ways. all of these
# signal streams are active in parallel. to use only a
# subset of these streams, leave the remainder in a "no
# effect" state (see below for each stream).



#### HEADER

# standard header
std_msgs/Header header

# message flags
uint32 msg_flags

# set as many of these as required to force synchronisation
# between those streams (you must set identical flags on
# each stream)
uint32 FLAG_SYNC_PLATFORM=1
uint32 FLAG_SYNC_CORE=2



#### DRIVE BODY DIRECT

# direct drive of wheels
# all elements zero has no effect on body
geometry_msgs/Twist body_vel

# direct drive of kinematic chain (Rad, Rad/sec)
# body_config_speed == 0 causes no changes
# body_config_speed == -1 means infinite speed (move aqap)
# first (of four) DOF is not implemented on current robots
float32[4] body_config
float32[4] body_config_speed



#### DRIVE BODY THROUGH MOTION CONTROLLER

#	Flags (see miro_constants/miro.py)
#
#	MIRO_BODY_MOVE_START
#		Raise this flag to start a move to the 2D pose
#		specified in "body_move", relative to the current
#		pose. The move will be planned using Park's &
#		Kuipers's 2011 (ICRA) algorithm.
#
#	MIRO_BODY_MOVE_CONTINUE
#		Raise this flag to continue a move that has already
#		been started.
#
#		NB: BODY_MOVE_CONTINUE must be raised in the same
#		frame that BODY_MOVE_START is raised; thus, the
#		flags will be set as:
#
#		START		1 0 0 0 0 0 0 0 ...
#		CONTINUE	1 1 1 1 1 1 1 1 ...
#
#	If no flags are set, body_move has no effect
uint32 body_move_flags

# desired change in body pose
geometry_msgs/Pose2D body_move



#### DRIVE COSMETIC DOFs DIRECT

# cosmetic kinematics
float32 tail # -1 (droop) through zero to +1 (wag)
float32[2] ear_rotate # 0 to 1
float32 eyelid_closure # 0 to 1
int16 blink_time # pulse +ve to start a blink (-ve == double blink)

# lights: drive the LED displays through a simple filter
uint8 lights_max_drive # maximum drive level when lights are at full amplitude (0-255); 127 is a sensible value
uint8 lights_dphase # delta phase between adjacent LEDs (0-255)
uint8 lights_phase # lighting phase (0-255)
uint8 lights_amp # amplitude of lighting pattern (0-255)
int8 lights_off # arithmetic offset of lighting pattern (-128 to 127)

# NB: here, and below, we use a uint16 container because
# the access syntax is more convenient from python (uint8
# arrays are implemented as strings by rospy)
uint16[3] lights_rgb # lighting color (0 to 255)

# low-level lights: drive 18 color channels directly;
# organisation is by color channel (r, g, b) first, then
# by led (front, middle, back), and by side (left, right),
# so that lights_raw[0] is red, front, left and
# lights_raw[1] is green, front, left.
uint16[18] lights_raw # lighting color channel (0 to 255)

# sounds
uint16 sound_index_P1 # pulse +ve to start playing a sound stored in P1 library
uint16 sound_index_P2 # pulse +ve to start playing a sound stored in P2 library





================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/Pose2D
# Deprecated
# Please use the full 3D pose.

# In general our recommendation is to use a full 3D representation of everything and for 2D specific applications make the appropriate projections into the plane for their calculations but optimally will preserve the 3D information during processing.

# If we have parallel copies of 2D datatypes every UI and other pipeline will end up needing to have dual interfaces to plot everything. And you will end up with not being able to use 3D tools for 2D use cases even if they're completely valid, as you'd have to reimplement it with different inputs and outputs. It's not particularly hard to plot the 2D pose or compute the yaw error for the Pose message and there are already tools and libraries that can do this for you.


# This expresses a position and orientation on a 2D manifold.

float64 x
float64 y
float64 theta
"""
  # Pseudo-constants
  FLAG_SYNC_PLATFORM = 1
  FLAG_SYNC_CORE = 2

  __slots__ = ['header','msg_flags','body_vel','body_config','body_config_speed','body_move_flags','body_move','tail','ear_rotate','eyelid_closure','blink_time','lights_max_drive','lights_dphase','lights_phase','lights_amp','lights_off','lights_rgb','lights_raw','sound_index_P1','sound_index_P2']
  _slot_types = ['std_msgs/Header','uint32','geometry_msgs/Twist','float32[4]','float32[4]','uint32','geometry_msgs/Pose2D','float32','float32[2]','float32','int16','uint8','uint8','uint8','uint8','int8','uint16[3]','uint16[18]','uint16','uint16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,msg_flags,body_vel,body_config,body_config_speed,body_move_flags,body_move,tail,ear_rotate,eyelid_closure,blink_time,lights_max_drive,lights_dphase,lights_phase,lights_amp,lights_off,lights_rgb,lights_raw,sound_index_P1,sound_index_P2

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(platform_control, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.msg_flags is None:
        self.msg_flags = 0
      if self.body_vel is None:
        self.body_vel = geometry_msgs.msg.Twist()
      if self.body_config is None:
        self.body_config = [0.] * 4
      if self.body_config_speed is None:
        self.body_config_speed = [0.] * 4
      if self.body_move_flags is None:
        self.body_move_flags = 0
      if self.body_move is None:
        self.body_move = geometry_msgs.msg.Pose2D()
      if self.tail is None:
        self.tail = 0.
      if self.ear_rotate is None:
        self.ear_rotate = [0.] * 2
      if self.eyelid_closure is None:
        self.eyelid_closure = 0.
      if self.blink_time is None:
        self.blink_time = 0
      if self.lights_max_drive is None:
        self.lights_max_drive = 0
      if self.lights_dphase is None:
        self.lights_dphase = 0
      if self.lights_phase is None:
        self.lights_phase = 0
      if self.lights_amp is None:
        self.lights_amp = 0
      if self.lights_off is None:
        self.lights_off = 0
      if self.lights_rgb is None:
        self.lights_rgb = [0] * 3
      if self.lights_raw is None:
        self.lights_raw = [0] * 18
      if self.sound_index_P1 is None:
        self.sound_index_P1 = 0
      if self.sound_index_P2 is None:
        self.sound_index_P2 = 0
    else:
      self.header = std_msgs.msg.Header()
      self.msg_flags = 0
      self.body_vel = geometry_msgs.msg.Twist()
      self.body_config = [0.] * 4
      self.body_config_speed = [0.] * 4
      self.body_move_flags = 0
      self.body_move = geometry_msgs.msg.Pose2D()
      self.tail = 0.
      self.ear_rotate = [0.] * 2
      self.eyelid_closure = 0.
      self.blink_time = 0
      self.lights_max_drive = 0
      self.lights_dphase = 0
      self.lights_phase = 0
      self.lights_amp = 0
      self.lights_off = 0
      self.lights_rgb = [0] * 3
      self.lights_raw = [0] * 18
      self.sound_index_P1 = 0
      self.sound_index_P2 = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_I6d().pack(_x.msg_flags, _x.body_vel.linear.x, _x.body_vel.linear.y, _x.body_vel.linear.z, _x.body_vel.angular.x, _x.body_vel.angular.y, _x.body_vel.angular.z))
      buff.write(_get_struct_4f().pack(*self.body_config))
      buff.write(_get_struct_4f().pack(*self.body_config_speed))
      _x = self
      buff.write(_get_struct_I3df().pack(_x.body_move_flags, _x.body_move.x, _x.body_move.y, _x.body_move.theta, _x.tail))
      buff.write(_get_struct_2f().pack(*self.ear_rotate))
      _x = self
      buff.write(_get_struct_fh4Bb().pack(_x.eyelid_closure, _x.blink_time, _x.lights_max_drive, _x.lights_dphase, _x.lights_phase, _x.lights_amp, _x.lights_off))
      buff.write(_get_struct_3H().pack(*self.lights_rgb))
      buff.write(_get_struct_18H().pack(*self.lights_raw))
      _x = self
      buff.write(_get_struct_2H().pack(_x.sound_index_P1, _x.sound_index_P2))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.body_vel is None:
        self.body_vel = geometry_msgs.msg.Twist()
      if self.body_move is None:
        self.body_move = geometry_msgs.msg.Pose2D()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 52
      (_x.msg_flags, _x.body_vel.linear.x, _x.body_vel.linear.y, _x.body_vel.linear.z, _x.body_vel.angular.x, _x.body_vel.angular.y, _x.body_vel.angular.z,) = _get_struct_I6d().unpack(str[start:end])
      start = end
      end += 16
      self.body_config = _get_struct_4f().unpack(str[start:end])
      start = end
      end += 16
      self.body_config_speed = _get_struct_4f().unpack(str[start:end])
      _x = self
      start = end
      end += 32
      (_x.body_move_flags, _x.body_move.x, _x.body_move.y, _x.body_move.theta, _x.tail,) = _get_struct_I3df().unpack(str[start:end])
      start = end
      end += 8
      self.ear_rotate = _get_struct_2f().unpack(str[start:end])
      _x = self
      start = end
      end += 11
      (_x.eyelid_closure, _x.blink_time, _x.lights_max_drive, _x.lights_dphase, _x.lights_phase, _x.lights_amp, _x.lights_off,) = _get_struct_fh4Bb().unpack(str[start:end])
      start = end
      end += 6
      self.lights_rgb = _get_struct_3H().unpack(str[start:end])
      start = end
      end += 36
      self.lights_raw = _get_struct_18H().unpack(str[start:end])
      _x = self
      start = end
      end += 4
      (_x.sound_index_P1, _x.sound_index_P2,) = _get_struct_2H().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_I6d().pack(_x.msg_flags, _x.body_vel.linear.x, _x.body_vel.linear.y, _x.body_vel.linear.z, _x.body_vel.angular.x, _x.body_vel.angular.y, _x.body_vel.angular.z))
      buff.write(self.body_config.tostring())
      buff.write(self.body_config_speed.tostring())
      _x = self
      buff.write(_get_struct_I3df().pack(_x.body_move_flags, _x.body_move.x, _x.body_move.y, _x.body_move.theta, _x.tail))
      buff.write(self.ear_rotate.tostring())
      _x = self
      buff.write(_get_struct_fh4Bb().pack(_x.eyelid_closure, _x.blink_time, _x.lights_max_drive, _x.lights_dphase, _x.lights_phase, _x.lights_amp, _x.lights_off))
      buff.write(self.lights_rgb.tostring())
      buff.write(self.lights_raw.tostring())
      _x = self
      buff.write(_get_struct_2H().pack(_x.sound_index_P1, _x.sound_index_P2))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.body_vel is None:
        self.body_vel = geometry_msgs.msg.Twist()
      if self.body_move is None:
        self.body_move = geometry_msgs.msg.Pose2D()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 52
      (_x.msg_flags, _x.body_vel.linear.x, _x.body_vel.linear.y, _x.body_vel.linear.z, _x.body_vel.angular.x, _x.body_vel.angular.y, _x.body_vel.angular.z,) = _get_struct_I6d().unpack(str[start:end])
      start = end
      end += 16
      self.body_config = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=4)
      start = end
      end += 16
      self.body_config_speed = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=4)
      _x = self
      start = end
      end += 32
      (_x.body_move_flags, _x.body_move.x, _x.body_move.y, _x.body_move.theta, _x.tail,) = _get_struct_I3df().unpack(str[start:end])
      start = end
      end += 8
      self.ear_rotate = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=2)
      _x = self
      start = end
      end += 11
      (_x.eyelid_closure, _x.blink_time, _x.lights_max_drive, _x.lights_dphase, _x.lights_phase, _x.lights_amp, _x.lights_off,) = _get_struct_fh4Bb().unpack(str[start:end])
      start = end
      end += 6
      self.lights_rgb = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=3)
      start = end
      end += 36
      self.lights_raw = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=18)
      _x = self
      start = end
      end += 4
      (_x.sound_index_P1, _x.sound_index_P2,) = _get_struct_2H().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_I6d = None
def _get_struct_I6d():
    global _struct_I6d
    if _struct_I6d is None:
        _struct_I6d = struct.Struct("<I6d")
    return _struct_I6d
_struct_fh4Bb = None
def _get_struct_fh4Bb():
    global _struct_fh4Bb
    if _struct_fh4Bb is None:
        _struct_fh4Bb = struct.Struct("<fh4Bb")
    return _struct_fh4Bb
_struct_18H = None
def _get_struct_18H():
    global _struct_18H
    if _struct_18H is None:
        _struct_18H = struct.Struct("<18H")
    return _struct_18H
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3H = None
def _get_struct_3H():
    global _struct_3H
    if _struct_3H is None:
        _struct_3H = struct.Struct("<3H")
    return _struct_3H
_struct_I3df = None
def _get_struct_I3df():
    global _struct_I3df
    if _struct_I3df is None:
        _struct_I3df = struct.Struct("<I3df")
    return _struct_I3df
_struct_4f = None
def _get_struct_4f():
    global _struct_4f
    if _struct_4f is None:
        _struct_4f = struct.Struct("<4f")
    return _struct_4f
_struct_2H = None
def _get_struct_2H():
    global _struct_2H
    if _struct_2H is None:
        _struct_2H = struct.Struct("<2H")
    return _struct_2H
