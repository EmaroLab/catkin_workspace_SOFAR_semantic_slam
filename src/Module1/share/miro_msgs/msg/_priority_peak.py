# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from miro_msgs/priority_peak.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class priority_peak(genpy.Message):
  _md5sum = "c5c53b287ed91e19422f1ad6f4de41f1"
  _type = "miro_msgs/priority_peak"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32 azim
float32 elev
float32 height
float32 size
int32 t_complete

"""
  __slots__ = ['azim','elev','height','size','t_complete']
  _slot_types = ['float32','float32','float32','float32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       azim,elev,height,size,t_complete

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(priority_peak, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.azim is None:
        self.azim = 0.
      if self.elev is None:
        self.elev = 0.
      if self.height is None:
        self.height = 0.
      if self.size is None:
        self.size = 0.
      if self.t_complete is None:
        self.t_complete = 0
    else:
      self.azim = 0.
      self.elev = 0.
      self.height = 0.
      self.size = 0.
      self.t_complete = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4fi().pack(_x.azim, _x.elev, _x.height, _x.size, _x.t_complete))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 20
      (_x.azim, _x.elev, _x.height, _x.size, _x.t_complete,) = _get_struct_4fi().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4fi().pack(_x.azim, _x.elev, _x.height, _x.size, _x.t_complete))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 20
      (_x.azim, _x.elev, _x.height, _x.size, _x.t_complete,) = _get_struct_4fi().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4fi = None
def _get_struct_4fi():
    global _struct_4fi
    if _struct_4fi is None:
        _struct_4fi = struct.Struct("<4fi")
    return _struct_4fi
