# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from miro_msgs/core_state.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import miro_msgs.msg
import std_msgs.msg

class core_state(genpy.Message):
  _md5sum = "522684231c219a6061e3a57fd3a4cba3"
  _type = "miro_msgs/core_state"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """
# direction: upstream
# source: biomimetic core
# description: state data



#### HEADER

# standard header
std_msgs/Header header

# message flags
uint32 msg_flags

# additional header
int32 time_usec			# time in usec with rollover at 1<<29



#### AFFECT

miro_msgs/affect emotion
miro_msgs/affect mood
miro_msgs/sleep sleep



#### ACTION

# priority of each action sub-system in P2
float32[8] priority



#### SPATIAL

miro_msgs/priority_peak[3] priority_peak
miro_msgs/audio_event audio_event



#### BRANCH

# output of action selection system
float32[8] selection
float32[8] disinhibition




================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: miro_msgs/affect
float32 valence
float32 arousal

================================================================================
MSG: miro_msgs/sleep
float32 wakefulness
float32 pressure

================================================================================
MSG: miro_msgs/priority_peak
float32 azim
float32 elev
float32 height
float32 size
int32 t_complete


================================================================================
MSG: miro_msgs/audio_event
uint32 flags
uint32 sample_number
float32 azim
float32 elev
float32 magnitude
int32 t_complete

"""
  __slots__ = ['header','msg_flags','time_usec','emotion','mood','sleep','priority','priority_peak','audio_event','selection','disinhibition']
  _slot_types = ['std_msgs/Header','uint32','int32','miro_msgs/affect','miro_msgs/affect','miro_msgs/sleep','float32[8]','miro_msgs/priority_peak[3]','miro_msgs/audio_event','float32[8]','float32[8]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,msg_flags,time_usec,emotion,mood,sleep,priority,priority_peak,audio_event,selection,disinhibition

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(core_state, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.msg_flags is None:
        self.msg_flags = 0
      if self.time_usec is None:
        self.time_usec = 0
      if self.emotion is None:
        self.emotion = miro_msgs.msg.affect()
      if self.mood is None:
        self.mood = miro_msgs.msg.affect()
      if self.sleep is None:
        self.sleep = miro_msgs.msg.sleep()
      if self.priority is None:
        self.priority = [0.] * 8
      if self.priority_peak is None:
        self.priority_peak = [miro_msgs.msg.priority_peak() for _ in range(3)]
      if self.audio_event is None:
        self.audio_event = miro_msgs.msg.audio_event()
      if self.selection is None:
        self.selection = [0.] * 8
      if self.disinhibition is None:
        self.disinhibition = [0.] * 8
    else:
      self.header = std_msgs.msg.Header()
      self.msg_flags = 0
      self.time_usec = 0
      self.emotion = miro_msgs.msg.affect()
      self.mood = miro_msgs.msg.affect()
      self.sleep = miro_msgs.msg.sleep()
      self.priority = [0.] * 8
      self.priority_peak = [miro_msgs.msg.priority_peak() for _ in range(3)]
      self.audio_event = miro_msgs.msg.audio_event()
      self.selection = [0.] * 8
      self.disinhibition = [0.] * 8

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_Ii6f().pack(_x.msg_flags, _x.time_usec, _x.emotion.valence, _x.emotion.arousal, _x.mood.valence, _x.mood.arousal, _x.sleep.wakefulness, _x.sleep.pressure))
      buff.write(_get_struct_8f().pack(*self.priority))
      for val1 in self.priority_peak:
        _x = val1
        buff.write(_get_struct_4fi().pack(_x.azim, _x.elev, _x.height, _x.size, _x.t_complete))
      _x = self
      buff.write(_get_struct_2I3fi().pack(_x.audio_event.flags, _x.audio_event.sample_number, _x.audio_event.azim, _x.audio_event.elev, _x.audio_event.magnitude, _x.audio_event.t_complete))
      buff.write(_get_struct_8f().pack(*self.selection))
      buff.write(_get_struct_8f().pack(*self.disinhibition))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.emotion is None:
        self.emotion = miro_msgs.msg.affect()
      if self.mood is None:
        self.mood = miro_msgs.msg.affect()
      if self.sleep is None:
        self.sleep = miro_msgs.msg.sleep()
      if self.priority_peak is None:
        self.priority_peak = None
      if self.audio_event is None:
        self.audio_event = miro_msgs.msg.audio_event()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.msg_flags, _x.time_usec, _x.emotion.valence, _x.emotion.arousal, _x.mood.valence, _x.mood.arousal, _x.sleep.wakefulness, _x.sleep.pressure,) = _get_struct_Ii6f().unpack(str[start:end])
      start = end
      end += 32
      self.priority = _get_struct_8f().unpack(str[start:end])
      self.priority_peak = []
      for i in range(0, 3):
        val1 = miro_msgs.msg.priority_peak()
        _x = val1
        start = end
        end += 20
        (_x.azim, _x.elev, _x.height, _x.size, _x.t_complete,) = _get_struct_4fi().unpack(str[start:end])
        self.priority_peak.append(val1)
      _x = self
      start = end
      end += 24
      (_x.audio_event.flags, _x.audio_event.sample_number, _x.audio_event.azim, _x.audio_event.elev, _x.audio_event.magnitude, _x.audio_event.t_complete,) = _get_struct_2I3fi().unpack(str[start:end])
      start = end
      end += 32
      self.selection = _get_struct_8f().unpack(str[start:end])
      start = end
      end += 32
      self.disinhibition = _get_struct_8f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_Ii6f().pack(_x.msg_flags, _x.time_usec, _x.emotion.valence, _x.emotion.arousal, _x.mood.valence, _x.mood.arousal, _x.sleep.wakefulness, _x.sleep.pressure))
      buff.write(self.priority.tostring())
      for val1 in self.priority_peak:
        _x = val1
        buff.write(_get_struct_4fi().pack(_x.azim, _x.elev, _x.height, _x.size, _x.t_complete))
      _x = self
      buff.write(_get_struct_2I3fi().pack(_x.audio_event.flags, _x.audio_event.sample_number, _x.audio_event.azim, _x.audio_event.elev, _x.audio_event.magnitude, _x.audio_event.t_complete))
      buff.write(self.selection.tostring())
      buff.write(self.disinhibition.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.emotion is None:
        self.emotion = miro_msgs.msg.affect()
      if self.mood is None:
        self.mood = miro_msgs.msg.affect()
      if self.sleep is None:
        self.sleep = miro_msgs.msg.sleep()
      if self.priority_peak is None:
        self.priority_peak = None
      if self.audio_event is None:
        self.audio_event = miro_msgs.msg.audio_event()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.msg_flags, _x.time_usec, _x.emotion.valence, _x.emotion.arousal, _x.mood.valence, _x.mood.arousal, _x.sleep.wakefulness, _x.sleep.pressure,) = _get_struct_Ii6f().unpack(str[start:end])
      start = end
      end += 32
      self.priority = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=8)
      self.priority_peak = []
      for i in range(0, 3):
        val1 = miro_msgs.msg.priority_peak()
        _x = val1
        start = end
        end += 20
        (_x.azim, _x.elev, _x.height, _x.size, _x.t_complete,) = _get_struct_4fi().unpack(str[start:end])
        self.priority_peak.append(val1)
      _x = self
      start = end
      end += 24
      (_x.audio_event.flags, _x.audio_event.sample_number, _x.audio_event.azim, _x.audio_event.elev, _x.audio_event.magnitude, _x.audio_event.t_complete,) = _get_struct_2I3fi().unpack(str[start:end])
      start = end
      end += 32
      self.selection = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=8)
      start = end
      end += 32
      self.disinhibition = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=8)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I3fi = None
def _get_struct_2I3fi():
    global _struct_2I3fi
    if _struct_2I3fi is None:
        _struct_2I3fi = struct.Struct("<2I3fi")
    return _struct_2I3fi
_struct_4fi = None
def _get_struct_4fi():
    global _struct_4fi
    if _struct_4fi is None:
        _struct_4fi = struct.Struct("<4fi")
    return _struct_4fi
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_8f = None
def _get_struct_8f():
    global _struct_8f
    if _struct_8f is None:
        _struct_8f = struct.Struct("<8f")
    return _struct_8f
_struct_Ii6f = None
def _get_struct_Ii6f():
    global _struct_Ii6f
    if _struct_Ii6f is None:
        _struct_Ii6f = struct.Struct("<Ii6f")
    return _struct_Ii6f
