# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from cob_3d_mapping_msgs/Plane.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import cob_3d_mapping_msgs.msg
import std_msgs.msg

class Plane(genpy.Message):
  _md5sum = "dfaae30aed6b6175cbcc972b30123ff6"
  _type = "cob_3d_mapping_msgs/Plane"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """#polygons describing hull
#first polygon -> outer hull
Polygon[] polygons

#pose describing parameters of plane
geometry_msgs/Pose pose

#number of points
float32 weight

#averaged color [deprecated to be removed]
std_msgs/ColorRGBA color

================================================================================
MSG: cob_3d_mapping_msgs/Polygon
#points describing polygon
Point2D[] points

================================================================================
MSG: cob_3d_mapping_msgs/Point2D
#coordinate on surface
float32 x
float32 y

#texture cooridante
float32 tex_x
float32 tex_y

float32 var

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: std_msgs/ColorRGBA
float32 r
float32 g
float32 b
float32 a
"""
  __slots__ = ['polygons','pose','weight','color']
  _slot_types = ['cob_3d_mapping_msgs/Polygon[]','geometry_msgs/Pose','float32','std_msgs/ColorRGBA']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       polygons,pose,weight,color

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Plane, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.polygons is None:
        self.polygons = []
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      if self.weight is None:
        self.weight = 0.
      if self.color is None:
        self.color = std_msgs.msg.ColorRGBA()
    else:
      self.polygons = []
      self.pose = geometry_msgs.msg.Pose()
      self.weight = 0.
      self.color = std_msgs.msg.ColorRGBA()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.polygons)
      buff.write(_struct_I.pack(length))
      for val1 in self.polygons:
        length = len(val1.points)
        buff.write(_struct_I.pack(length))
        for val2 in val1.points:
          _x = val2
          buff.write(_get_struct_5f().pack(_x.x, _x.y, _x.tex_x, _x.tex_y, _x.var))
      _x = self
      buff.write(_get_struct_7d5f().pack(_x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.weight, _x.color.r, _x.color.g, _x.color.b, _x.color.a))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.polygons is None:
        self.polygons = None
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      if self.color is None:
        self.color = std_msgs.msg.ColorRGBA()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.polygons = []
      for i in range(0, length):
        val1 = cob_3d_mapping_msgs.msg.Polygon()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.points = []
        for i in range(0, length):
          val2 = cob_3d_mapping_msgs.msg.Point2D()
          _x = val2
          start = end
          end += 20
          (_x.x, _x.y, _x.tex_x, _x.tex_y, _x.var,) = _get_struct_5f().unpack(str[start:end])
          val1.points.append(val2)
        self.polygons.append(val1)
      _x = self
      start = end
      end += 76
      (_x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.weight, _x.color.r, _x.color.g, _x.color.b, _x.color.a,) = _get_struct_7d5f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.polygons)
      buff.write(_struct_I.pack(length))
      for val1 in self.polygons:
        length = len(val1.points)
        buff.write(_struct_I.pack(length))
        for val2 in val1.points:
          _x = val2
          buff.write(_get_struct_5f().pack(_x.x, _x.y, _x.tex_x, _x.tex_y, _x.var))
      _x = self
      buff.write(_get_struct_7d5f().pack(_x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.weight, _x.color.r, _x.color.g, _x.color.b, _x.color.a))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.polygons is None:
        self.polygons = None
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      if self.color is None:
        self.color = std_msgs.msg.ColorRGBA()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.polygons = []
      for i in range(0, length):
        val1 = cob_3d_mapping_msgs.msg.Polygon()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.points = []
        for i in range(0, length):
          val2 = cob_3d_mapping_msgs.msg.Point2D()
          _x = val2
          start = end
          end += 20
          (_x.x, _x.y, _x.tex_x, _x.tex_y, _x.var,) = _get_struct_5f().unpack(str[start:end])
          val1.points.append(val2)
        self.polygons.append(val1)
      _x = self
      start = end
      end += 76
      (_x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.weight, _x.color.r, _x.color.g, _x.color.b, _x.color.a,) = _get_struct_7d5f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7d5f = None
def _get_struct_7d5f():
    global _struct_7d5f
    if _struct_7d5f is None:
        _struct_7d5f = struct.Struct("<7d5f")
    return _struct_7d5f
_struct_5f = None
def _get_struct_5f():
    global _struct_5f
    if _struct_5f is None:
        _struct_5f = struct.Struct("<5f")
    return _struct_5f
