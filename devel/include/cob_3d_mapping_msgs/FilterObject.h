// Generated by gencpp from file cob_3d_mapping_msgs/FilterObject.msg
// DO NOT EDIT!


#ifndef COB_3D_MAPPING_MSGS_MESSAGE_FILTEROBJECT_H
#define COB_3D_MAPPING_MSGS_MESSAGE_FILTEROBJECT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cob_3d_mapping_msgs
{
template <class ContainerAllocator>
struct FilterObject_
{
  typedef FilterObject_<ContainerAllocator> Type;

  FilterObject_()
    : height(0.0)
    , width(0.0)
    , curv_h(0.0)
    , curv_w(0.0)  {
    }
  FilterObject_(const ContainerAllocator& _alloc)
    : height(0.0)
    , width(0.0)
    , curv_h(0.0)
    , curv_w(0.0)  {
  (void)_alloc;
    }



   typedef float _height_type;
  _height_type height;

   typedef float _width_type;
  _width_type width;

   typedef float _curv_h_type;
  _curv_h_type curv_h;

   typedef float _curv_w_type;
  _curv_w_type curv_w;





  typedef boost::shared_ptr< ::cob_3d_mapping_msgs::FilterObject_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cob_3d_mapping_msgs::FilterObject_<ContainerAllocator> const> ConstPtr;

}; // struct FilterObject_

typedef ::cob_3d_mapping_msgs::FilterObject_<std::allocator<void> > FilterObject;

typedef boost::shared_ptr< ::cob_3d_mapping_msgs::FilterObject > FilterObjectPtr;
typedef boost::shared_ptr< ::cob_3d_mapping_msgs::FilterObject const> FilterObjectConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cob_3d_mapping_msgs::FilterObject_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cob_3d_mapping_msgs::FilterObject_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace cob_3d_mapping_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'cob_object_detection_msgs': ['/home/filippo/catkin_workspace_SOFAR_semantic_slam/devel/share/cob_object_detection_msgs/msg', '/home/filippo/catkin_workspace_SOFAR_semantic_slam/src/module3/cob_perception_common/cob_object_detection_msgs/msg'], 'cob_3d_mapping_msgs': ['/home/filippo/catkin_workspace_SOFAR_semantic_slam/devel/share/cob_3d_mapping_msgs/msg', '/home/filippo/catkin_workspace_SOFAR_semantic_slam/src/module3/cob_perception_common/cob_3d_mapping_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::cob_3d_mapping_msgs::FilterObject_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cob_3d_mapping_msgs::FilterObject_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cob_3d_mapping_msgs::FilterObject_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cob_3d_mapping_msgs::FilterObject_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cob_3d_mapping_msgs::FilterObject_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cob_3d_mapping_msgs::FilterObject_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cob_3d_mapping_msgs::FilterObject_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3ce8bd944e4374d48880ed66855bf0be";
  }

  static const char* value(const ::cob_3d_mapping_msgs::FilterObject_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3ce8bd944e4374d4ULL;
  static const uint64_t static_value2 = 0x8880ed66855bf0beULL;
};

template<class ContainerAllocator>
struct DataType< ::cob_3d_mapping_msgs::FilterObject_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cob_3d_mapping_msgs/FilterObject";
  }

  static const char* value(const ::cob_3d_mapping_msgs::FilterObject_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cob_3d_mapping_msgs::FilterObject_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 height	#longer side\n\
float32 width	#smaller side\n\
float32 curv_h	#curvature to height\n\
float32 curv_w	#curvature to width\n\
";
  }

  static const char* value(const ::cob_3d_mapping_msgs::FilterObject_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cob_3d_mapping_msgs::FilterObject_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.height);
      stream.next(m.width);
      stream.next(m.curv_h);
      stream.next(m.curv_w);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FilterObject_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cob_3d_mapping_msgs::FilterObject_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cob_3d_mapping_msgs::FilterObject_<ContainerAllocator>& v)
  {
    s << indent << "height: ";
    Printer<float>::stream(s, indent + "  ", v.height);
    s << indent << "width: ";
    Printer<float>::stream(s, indent + "  ", v.width);
    s << indent << "curv_h: ";
    Printer<float>::stream(s, indent + "  ", v.curv_h);
    s << indent << "curv_w: ";
    Printer<float>::stream(s, indent + "  ", v.curv_w);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COB_3D_MAPPING_MSGS_MESSAGE_FILTEROBJECT_H
