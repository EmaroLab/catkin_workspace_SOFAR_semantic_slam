// Generated by gencpp from file cob_3d_mapping_msgs/CurvedPolygon.msg
// DO NOT EDIT!


#ifndef COB_3D_MAPPING_MSGS_MESSAGE_CURVEDPOLYGON_H
#define COB_3D_MAPPING_MSGS_MESSAGE_CURVEDPOLYGON_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <cob_3d_mapping_msgs/SimilarityScore.h>
#include <cob_3d_mapping_msgs/PolylinePoint.h>
#include <cob_3d_mapping_msgs/Feature.h>

namespace cob_3d_mapping_msgs
{
template <class ContainerAllocator>
struct CurvedPolygon_
{
  typedef CurvedPolygon_<ContainerAllocator> Type;

  CurvedPolygon_()
    : stamp()
    , ID(0)
    , parameter()
    , score()
    , polyline()
    , features()
    , energy()
    , weight(0.0)  {
      parameter.assign(0.0);
  }
  CurvedPolygon_(const ContainerAllocator& _alloc)
    : stamp()
    , ID(0)
    , parameter()
    , score(_alloc)
    , polyline(_alloc)
    , features(_alloc)
    , energy(_alloc)
    , weight(0.0)  {
  (void)_alloc;
      parameter.assign(0.0);
  }



   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef uint32_t _ID_type;
  _ID_type ID;

   typedef boost::array<float, 6>  _parameter_type;
  _parameter_type parameter;

   typedef std::vector< ::cob_3d_mapping_msgs::SimilarityScore_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::cob_3d_mapping_msgs::SimilarityScore_<ContainerAllocator> >::other >  _score_type;
  _score_type score;

   typedef std::vector< ::cob_3d_mapping_msgs::PolylinePoint_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::cob_3d_mapping_msgs::PolylinePoint_<ContainerAllocator> >::other >  _polyline_type;
  _polyline_type polyline;

   typedef std::vector< ::cob_3d_mapping_msgs::Feature_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::cob_3d_mapping_msgs::Feature_<ContainerAllocator> >::other >  _features_type;
  _features_type features;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _energy_type;
  _energy_type energy;

   typedef float _weight_type;
  _weight_type weight;





  typedef boost::shared_ptr< ::cob_3d_mapping_msgs::CurvedPolygon_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cob_3d_mapping_msgs::CurvedPolygon_<ContainerAllocator> const> ConstPtr;

}; // struct CurvedPolygon_

typedef ::cob_3d_mapping_msgs::CurvedPolygon_<std::allocator<void> > CurvedPolygon;

typedef boost::shared_ptr< ::cob_3d_mapping_msgs::CurvedPolygon > CurvedPolygonPtr;
typedef boost::shared_ptr< ::cob_3d_mapping_msgs::CurvedPolygon const> CurvedPolygonConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cob_3d_mapping_msgs::CurvedPolygon_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cob_3d_mapping_msgs::CurvedPolygon_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace cob_3d_mapping_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'cob_object_detection_msgs': ['/home/filippo/catkin_workspace_SOFAR_semantic_slam/devel/share/cob_object_detection_msgs/msg', '/home/filippo/catkin_workspace_SOFAR_semantic_slam/src/module3/cob_perception_common/cob_object_detection_msgs/msg'], 'cob_3d_mapping_msgs': ['/home/filippo/catkin_workspace_SOFAR_semantic_slam/devel/share/cob_3d_mapping_msgs/msg', '/home/filippo/catkin_workspace_SOFAR_semantic_slam/src/module3/cob_perception_common/cob_3d_mapping_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::cob_3d_mapping_msgs::CurvedPolygon_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cob_3d_mapping_msgs::CurvedPolygon_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cob_3d_mapping_msgs::CurvedPolygon_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cob_3d_mapping_msgs::CurvedPolygon_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cob_3d_mapping_msgs::CurvedPolygon_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cob_3d_mapping_msgs::CurvedPolygon_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cob_3d_mapping_msgs::CurvedPolygon_<ContainerAllocator> >
{
  static const char* value()
  {
    return "44b9c6adf55085288b1561faf0dcdb6d";
  }

  static const char* value(const ::cob_3d_mapping_msgs::CurvedPolygon_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x44b9c6adf5508528ULL;
  static const uint64_t static_value2 = 0x8b1561faf0dcdb6dULL;
};

template<class ContainerAllocator>
struct DataType< ::cob_3d_mapping_msgs::CurvedPolygon_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cob_3d_mapping_msgs/CurvedPolygon";
  }

  static const char* value(const ::cob_3d_mapping_msgs::CurvedPolygon_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cob_3d_mapping_msgs::CurvedPolygon_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time stamp\n\
uint32 ID\n\
float32[6] parameter\n\
#float32[][3] polyline\n\
SimilarityScore[] score\n\
PolylinePoint[] polyline\n\
Feature[] features\n\
string energy\n\
float32 weight\n\
\n\
================================================================================\n\
MSG: cob_3d_mapping_msgs/SimilarityScore\n\
uint32 ID\n\
float32 prob\n\
================================================================================\n\
MSG: cob_3d_mapping_msgs/PolylinePoint\n\
float32 x\n\
float32 y\n\
float32 edge_prob\n\
================================================================================\n\
MSG: cob_3d_mapping_msgs/Feature\n\
float32 x\n\
float32 y\n\
float32 z\n\
uint32 ID\n\
";
  }

  static const char* value(const ::cob_3d_mapping_msgs::CurvedPolygon_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cob_3d_mapping_msgs::CurvedPolygon_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stamp);
      stream.next(m.ID);
      stream.next(m.parameter);
      stream.next(m.score);
      stream.next(m.polyline);
      stream.next(m.features);
      stream.next(m.energy);
      stream.next(m.weight);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CurvedPolygon_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cob_3d_mapping_msgs::CurvedPolygon_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cob_3d_mapping_msgs::CurvedPolygon_<ContainerAllocator>& v)
  {
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "ID: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.ID);
    s << indent << "parameter[]" << std::endl;
    for (size_t i = 0; i < v.parameter.size(); ++i)
    {
      s << indent << "  parameter[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.parameter[i]);
    }
    s << indent << "score[]" << std::endl;
    for (size_t i = 0; i < v.score.size(); ++i)
    {
      s << indent << "  score[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::cob_3d_mapping_msgs::SimilarityScore_<ContainerAllocator> >::stream(s, indent + "    ", v.score[i]);
    }
    s << indent << "polyline[]" << std::endl;
    for (size_t i = 0; i < v.polyline.size(); ++i)
    {
      s << indent << "  polyline[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::cob_3d_mapping_msgs::PolylinePoint_<ContainerAllocator> >::stream(s, indent + "    ", v.polyline[i]);
    }
    s << indent << "features[]" << std::endl;
    for (size_t i = 0; i < v.features.size(); ++i)
    {
      s << indent << "  features[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::cob_3d_mapping_msgs::Feature_<ContainerAllocator> >::stream(s, indent + "    ", v.features[i]);
    }
    s << indent << "energy: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.energy);
    s << indent << "weight: ";
    Printer<float>::stream(s, indent + "  ", v.weight);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COB_3D_MAPPING_MSGS_MESSAGE_CURVEDPOLYGON_H
